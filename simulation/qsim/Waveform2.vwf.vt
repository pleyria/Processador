// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "01/12/2022 10:38:03"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          DecodificadorInstrucoes
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module DecodificadorInstrucoes_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [15:0] instrucao;
// wires                                               
wire sADD;
wire sAND;
wire sDIR;
wire sHLT;
wire sIM;
wire sIN;
wire sIND;
wire sJ;
wire sJN;
wire sJZ;
wire sLDA;
wire sLDD;
wire sNOP;
wire sNOT;
wire sOR;
wire sOUT;
wire sSHL;
wire sSHR;
wire sSOP;
wire sSTA;
wire sSTD;
wire sSUB;

// assign statements (if any)                          
DecodificadorInstrucoes i1 (
// port map - connection between master ports and signals/registers   
	.instrucao(instrucao),
	.sADD(sADD),
	.sAND(sAND),
	.sDIR(sDIR),
	.sHLT(sHLT),
	.sIM(sIM),
	.sIN(sIN),
	.sIND(sIND),
	.sJ(sJ),
	.sJN(sJN),
	.sJZ(sJZ),
	.sLDA(sLDA),
	.sLDD(sLDD),
	.sNOP(sNOP),
	.sNOT(sNOT),
	.sOR(sOR),
	.sOUT(sOUT),
	.sSHL(sSHL),
	.sSHR(sSHR),
	.sSOP(sSOP),
	.sSTA(sSTA),
	.sSTD(sSTD),
	.sSUB(sSUB)
);
initial 
begin 
#1000000 $finish;
end 
// instrucao[ 15 ]
initial
begin
	instrucao[15] = 1'b1;
end 
// instrucao[ 14 ]
initial
begin
	instrucao[14] = 1'b0;
end 
// instrucao[ 13 ]
initial
begin
	instrucao[13] = 1'b0;
end 
// instrucao[ 12 ]
initial
begin
	instrucao[12] = 1'b0;
end 
// instrucao[ 11 ]
initial
begin
	instrucao[11] = 1'b1;
end 
// instrucao[ 10 ]
initial
begin
	instrucao[10] = 1'b0;
end 
// instrucao[ 9 ]
initial
begin
	instrucao[9] = 1'b0;
end 
// instrucao[ 8 ]
initial
begin
	instrucao[8] = 1'b0;
end 
// instrucao[ 7 ]
initial
begin
	instrucao[7] = 1'b0;
end 
// instrucao[ 6 ]
initial
begin
	instrucao[6] = 1'b0;
end 
// instrucao[ 5 ]
initial
begin
	instrucao[5] = 1'b0;
end 
// instrucao[ 4 ]
initial
begin
	instrucao[4] = 1'b0;
end 
// instrucao[ 3 ]
initial
begin
	instrucao[3] = 1'b0;
end 
// instrucao[ 2 ]
initial
begin
	instrucao[2] = 1'b0;
end 
// instrucao[ 1 ]
initial
begin
	instrucao[1] = 1'b0;
end 
// instrucao[ 0 ]
initial
begin
	instrucao[0] = 1'b0;
end 
endmodule

