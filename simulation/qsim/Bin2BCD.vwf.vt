// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/25/2020 14:13:47"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Bin2BCD
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Bin2BCD_vlg_sample_tst(
	bin,
	clock,
	start,
	sampler_tx
);
input [15:0] bin;
input  clock;
input  start;
output sampler_tx;

reg sample;
time current_time;
always @(bin or clock or start)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
    if ($realtime == 0 || $realtime != current_time)  
    begin                                             
        if (sample === 1'bx)                          
            sample = 0;                               
        else                                          
            sample = ~sample;                         
    end                                               
    current_time = $realtime;                         
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Bin2BCD_vlg_check_tst (
	bcd,
	sampler_rx
);
input [19:0] bcd;
input sampler_rx;

reg [19:0] bcd_expected;

reg [19:0] bcd_prev;

reg [19:0] bcd_expected_prev;

reg [19:0] last_bcd_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:1] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 1'b1;
end

// update real /o prevs

always @(trigger)
begin
	bcd_prev = bcd;
end

// update expected /o prevs

always @(trigger)
begin
	bcd_expected_prev = bcd_expected;
end


// expected bcd[ 19 ]
initial
begin
	bcd_expected[19] = 1'bX;
	bcd_expected[19] = #9000 1'b0;
end 
// expected bcd[ 18 ]
initial
begin
	bcd_expected[18] = 1'bX;
	bcd_expected[18] = #9000 1'b0;
end 
// expected bcd[ 17 ]
initial
begin
	bcd_expected[17] = 1'bX;
	bcd_expected[17] = #9000 1'b0;
end 
// expected bcd[ 16 ]
initial
begin
	bcd_expected[16] = 1'bX;
	bcd_expected[16] = #9000 1'b0;
end 
// expected bcd[ 15 ]
initial
begin
	bcd_expected[15] = 1'bX;
	bcd_expected[15] = #9000 1'b0;
end 
// expected bcd[ 14 ]
initial
begin
	bcd_expected[14] = 1'bX;
	bcd_expected[14] = #9000 1'b0;
end 
// expected bcd[ 13 ]
initial
begin
	bcd_expected[13] = 1'bX;
	bcd_expected[13] = #9000 1'b0;
end 
// expected bcd[ 12 ]
initial
begin
	bcd_expected[12] = 1'bX;
	bcd_expected[12] = #9000 1'b0;
end 
// expected bcd[ 11 ]
initial
begin
	bcd_expected[11] = 1'bX;
	bcd_expected[11] = #9000 1'b0;
end 
// expected bcd[ 10 ]
initial
begin
	bcd_expected[10] = 1'bX;
	bcd_expected[10] = #9000 1'b0;
end 
// expected bcd[ 9 ]
initial
begin
	bcd_expected[9] = 1'bX;
	bcd_expected[9] = #9000 1'b0;
end 
// expected bcd[ 8 ]
initial
begin
	bcd_expected[8] = 1'bX;
	bcd_expected[8] = #9000 1'b0;
end 
// expected bcd[ 7 ]
initial
begin
	bcd_expected[7] = 1'bX;
	bcd_expected[7] = #9000 1'b0;
end 
// expected bcd[ 6 ]
initial
begin
	bcd_expected[6] = 1'bX;
	bcd_expected[6] = #9000 1'b0;
end 
// expected bcd[ 5 ]
initial
begin
	bcd_expected[5] = 1'bX;
	bcd_expected[5] = #9000 1'b0;
end 
// expected bcd[ 4 ]
initial
begin
	bcd_expected[4] = 1'bX;
	bcd_expected[4] = #9000 1'b0;
end 
// expected bcd[ 3 ]
initial
begin
	bcd_expected[3] = 1'bX;
	bcd_expected[3] = #9000 1'b0;
end 
// expected bcd[ 2 ]
initial
begin
	bcd_expected[2] = 1'bX;
	bcd_expected[2] = #9000 1'b0;
end 
// expected bcd[ 1 ]
initial
begin
	bcd_expected[1] = 1'bX;
	bcd_expected[1] = #9000 1'b0;
end 
// expected bcd[ 0 ]
initial
begin
	bcd_expected[0] = 1'bX;
	bcd_expected[0] = #9000 1'b0;
end 
// generate trigger
always @(bcd_expected or bcd)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected bcd = %b | ",bcd_expected_prev);
	$display("| real bcd = %b | ",bcd_prev);
`endif
	if (
		( bcd_expected_prev[0] !== 1'bx ) && ( bcd_prev[0] !== bcd_expected_prev[0] )
		&& ((bcd_expected_prev[0] !== last_bcd_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bcd[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bcd_expected_prev);
		$display ("     Real value = %b", bcd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_bcd_exp[0] = bcd_expected_prev[0];
	end
	if (
		( bcd_expected_prev[1] !== 1'bx ) && ( bcd_prev[1] !== bcd_expected_prev[1] )
		&& ((bcd_expected_prev[1] !== last_bcd_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bcd[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bcd_expected_prev);
		$display ("     Real value = %b", bcd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_bcd_exp[1] = bcd_expected_prev[1];
	end
	if (
		( bcd_expected_prev[2] !== 1'bx ) && ( bcd_prev[2] !== bcd_expected_prev[2] )
		&& ((bcd_expected_prev[2] !== last_bcd_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bcd[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bcd_expected_prev);
		$display ("     Real value = %b", bcd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_bcd_exp[2] = bcd_expected_prev[2];
	end
	if (
		( bcd_expected_prev[3] !== 1'bx ) && ( bcd_prev[3] !== bcd_expected_prev[3] )
		&& ((bcd_expected_prev[3] !== last_bcd_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bcd[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bcd_expected_prev);
		$display ("     Real value = %b", bcd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_bcd_exp[3] = bcd_expected_prev[3];
	end
	if (
		( bcd_expected_prev[4] !== 1'bx ) && ( bcd_prev[4] !== bcd_expected_prev[4] )
		&& ((bcd_expected_prev[4] !== last_bcd_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bcd[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bcd_expected_prev);
		$display ("     Real value = %b", bcd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_bcd_exp[4] = bcd_expected_prev[4];
	end
	if (
		( bcd_expected_prev[5] !== 1'bx ) && ( bcd_prev[5] !== bcd_expected_prev[5] )
		&& ((bcd_expected_prev[5] !== last_bcd_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bcd[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bcd_expected_prev);
		$display ("     Real value = %b", bcd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_bcd_exp[5] = bcd_expected_prev[5];
	end
	if (
		( bcd_expected_prev[6] !== 1'bx ) && ( bcd_prev[6] !== bcd_expected_prev[6] )
		&& ((bcd_expected_prev[6] !== last_bcd_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bcd[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bcd_expected_prev);
		$display ("     Real value = %b", bcd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_bcd_exp[6] = bcd_expected_prev[6];
	end
	if (
		( bcd_expected_prev[7] !== 1'bx ) && ( bcd_prev[7] !== bcd_expected_prev[7] )
		&& ((bcd_expected_prev[7] !== last_bcd_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bcd[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bcd_expected_prev);
		$display ("     Real value = %b", bcd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_bcd_exp[7] = bcd_expected_prev[7];
	end
	if (
		( bcd_expected_prev[8] !== 1'bx ) && ( bcd_prev[8] !== bcd_expected_prev[8] )
		&& ((bcd_expected_prev[8] !== last_bcd_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bcd[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bcd_expected_prev);
		$display ("     Real value = %b", bcd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_bcd_exp[8] = bcd_expected_prev[8];
	end
	if (
		( bcd_expected_prev[9] !== 1'bx ) && ( bcd_prev[9] !== bcd_expected_prev[9] )
		&& ((bcd_expected_prev[9] !== last_bcd_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bcd[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bcd_expected_prev);
		$display ("     Real value = %b", bcd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_bcd_exp[9] = bcd_expected_prev[9];
	end
	if (
		( bcd_expected_prev[10] !== 1'bx ) && ( bcd_prev[10] !== bcd_expected_prev[10] )
		&& ((bcd_expected_prev[10] !== last_bcd_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bcd[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bcd_expected_prev);
		$display ("     Real value = %b", bcd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_bcd_exp[10] = bcd_expected_prev[10];
	end
	if (
		( bcd_expected_prev[11] !== 1'bx ) && ( bcd_prev[11] !== bcd_expected_prev[11] )
		&& ((bcd_expected_prev[11] !== last_bcd_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bcd[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bcd_expected_prev);
		$display ("     Real value = %b", bcd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_bcd_exp[11] = bcd_expected_prev[11];
	end
	if (
		( bcd_expected_prev[12] !== 1'bx ) && ( bcd_prev[12] !== bcd_expected_prev[12] )
		&& ((bcd_expected_prev[12] !== last_bcd_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bcd[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bcd_expected_prev);
		$display ("     Real value = %b", bcd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_bcd_exp[12] = bcd_expected_prev[12];
	end
	if (
		( bcd_expected_prev[13] !== 1'bx ) && ( bcd_prev[13] !== bcd_expected_prev[13] )
		&& ((bcd_expected_prev[13] !== last_bcd_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bcd[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bcd_expected_prev);
		$display ("     Real value = %b", bcd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_bcd_exp[13] = bcd_expected_prev[13];
	end
	if (
		( bcd_expected_prev[14] !== 1'bx ) && ( bcd_prev[14] !== bcd_expected_prev[14] )
		&& ((bcd_expected_prev[14] !== last_bcd_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bcd[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bcd_expected_prev);
		$display ("     Real value = %b", bcd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_bcd_exp[14] = bcd_expected_prev[14];
	end
	if (
		( bcd_expected_prev[15] !== 1'bx ) && ( bcd_prev[15] !== bcd_expected_prev[15] )
		&& ((bcd_expected_prev[15] !== last_bcd_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bcd[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bcd_expected_prev);
		$display ("     Real value = %b", bcd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_bcd_exp[15] = bcd_expected_prev[15];
	end
	if (
		( bcd_expected_prev[16] !== 1'bx ) && ( bcd_prev[16] !== bcd_expected_prev[16] )
		&& ((bcd_expected_prev[16] !== last_bcd_exp[16]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bcd[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bcd_expected_prev);
		$display ("     Real value = %b", bcd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_bcd_exp[16] = bcd_expected_prev[16];
	end
	if (
		( bcd_expected_prev[17] !== 1'bx ) && ( bcd_prev[17] !== bcd_expected_prev[17] )
		&& ((bcd_expected_prev[17] !== last_bcd_exp[17]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bcd[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bcd_expected_prev);
		$display ("     Real value = %b", bcd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_bcd_exp[17] = bcd_expected_prev[17];
	end
	if (
		( bcd_expected_prev[18] !== 1'bx ) && ( bcd_prev[18] !== bcd_expected_prev[18] )
		&& ((bcd_expected_prev[18] !== last_bcd_exp[18]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bcd[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bcd_expected_prev);
		$display ("     Real value = %b", bcd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_bcd_exp[18] = bcd_expected_prev[18];
	end
	if (
		( bcd_expected_prev[19] !== 1'bx ) && ( bcd_prev[19] !== bcd_expected_prev[19] )
		&& ((bcd_expected_prev[19] !== last_bcd_exp[19]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bcd[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bcd_expected_prev);
		$display ("     Real value = %b", bcd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_bcd_exp[19] = bcd_expected_prev[19];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Bin2BCD_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [15:0] bin;
reg clock;
reg start;
// wires                                               
wire [19:0] bcd;

wire sampler;                             

// assign statements (if any)                          
Bin2BCD i1 (
// port map - connection between master ports and signals/registers   
	.bcd(bcd),
	.bin(bin),
	.clock(clock),
	.start(start)
);

// clock
always
begin
	clock = 1'b0;
	clock = #2000 1'b1;
	#2000;
end 
// bin[ 15 ]
initial
begin
	bin[15] = 1'b0;
end 
// bin[ 14 ]
initial
begin
	bin[14] = 1'b0;
end 
// bin[ 13 ]
initial
begin
	bin[13] = 1'b0;
end 
// bin[ 12 ]
initial
begin
	bin[12] = 1'b1;
end 
// bin[ 11 ]
initial
begin
	bin[11] = 1'b0;
end 
// bin[ 10 ]
initial
begin
	bin[10] = 1'b1;
end 
// bin[ 9 ]
initial
begin
	bin[9] = 1'b0;
end 
// bin[ 8 ]
initial
begin
	bin[8] = 1'b1;
end 
// bin[ 7 ]
initial
begin
	bin[7] = 1'b0;
end 
// bin[ 6 ]
initial
begin
	bin[6] = 1'b1;
end 
// bin[ 5 ]
initial
begin
	bin[5] = 1'b0;
end 
// bin[ 4 ]
initial
begin
	bin[4] = 1'b0;
end 
// bin[ 3 ]
initial
begin
	bin[3] = 1'b0;
end 
// bin[ 2 ]
initial
begin
	bin[2] = 1'b0;
end 
// bin[ 1 ]
initial
begin
	bin[1] = 1'b0;
end 
// bin[ 0 ]
initial
begin
	bin[0] = 1'b1;
end 

// start
initial
begin
	start = 1'b1;
	start = #39000 1'b0;
end 

Bin2BCD_vlg_sample_tst tb_sample (
	.bin(bin),
	.clock(clock),
	.start(start),
	.sampler_tx(sampler)
);

Bin2BCD_vlg_check_tst tb_out(
	.bcd(bcd),
	.sampler_rx(sampler)
);
endmodule

