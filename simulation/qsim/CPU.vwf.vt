// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/28/2020 17:33:54"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    CPU
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module CPU_vlg_sample_tst(
	clk,
	clkBCD,
	entrada,
	sampler_tx
);
input  clk;
input  clkBCD;
input [15:0] entrada;
output sampler_tx;

reg sample;
time current_time;
always @(clk or clkBCD or entrada)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
    if ($realtime == 0 || $realtime != current_time)  
    begin                                             
        if (sample === 1'bx)                          
            sample = 0;                               
        else                                          
            sample = ~sample;                         
    end                                               
    current_time = $realtime;                         
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module CPU_vlg_check_tst (
	T0,
	T1,
	T2,
	T3,
	T4,
	T5,
	T6,
	T7,
	T8,
	T9,
	a0,
	a1,
	a2,
	a3,
	a4,
	a5,
	acumulador,
	b0,
	b1,
	b2,
	b3,
	b4,
	b5,
	bcd,
	c0,
	c1,
	c2,
	c3,
	c4,
	c5,
	d0,
	d1,
	d2,
	d3,
	d4,
	d5,
	e0,
	e1,
	e2,
	e3,
	e4,
	e5,
	f0,
	f1,
	f2,
	f3,
	f4,
	f5,
	g0,
	g1,
	g2,
	g3,
	g4,
	g5,
	incrementPC,
	opULA,
	qMEM,
	qPC,
	qRDM,
	qREM,
	qRI,
	sADD,
	sAND,
	sDIR,
	sHLT,
	sIM,
	sIN,
	sIND,
	sJ,
	sJN,
	sJZ,
	sLDA,
	sN,
	sNOP,
	sNOT,
	sOR,
	sOUT,
	sSHL,
	sSHR,
	sSOP,
	sSTA,
	sSUB,
	saida,
	selectRDM,
	selectREM,
	writeAC,
	writeMEM,
	writeN,
	writeOUT,
	writeRDM,
	writeREM,
	writeRI,
	writeZ,
	sampler_rx
);
input  T0;
input  T1;
input  T2;
input  T3;
input  T4;
input  T5;
input  T6;
input  T7;
input  T8;
input  T9;
input  a0;
input  a1;
input  a2;
input  a3;
input  a4;
input  a5;
input [15:0] acumulador;
input  b0;
input  b1;
input  b2;
input  b3;
input  b4;
input  b5;
input [19:0] bcd;
input  c0;
input  c1;
input  c2;
input  c3;
input  c4;
input  c5;
input  d0;
input  d1;
input  d2;
input  d3;
input  d4;
input  d5;
input  e0;
input  e1;
input  e2;
input  e3;
input  e4;
input  e5;
input  f0;
input  f1;
input  f2;
input  f3;
input  f4;
input  f5;
input  g0;
input  g1;
input  g2;
input  g3;
input  g4;
input  g5;
input  incrementPC;
input [2:0] opULA;
input [15:0] qMEM;
input [15:0] qPC;
input [15:0] qRDM;
input [15:0] qREM;
input [15:0] qRI;
input  sADD;
input  sAND;
input  sDIR;
input  sHLT;
input  sIM;
input  sIN;
input  sIND;
input  sJ;
input  sJN;
input  sJZ;
input  sLDA;
input  sN;
input  sNOP;
input  sNOT;
input  sOR;
input  sOUT;
input  sSHL;
input  sSHR;
input  sSOP;
input  sSTA;
input  sSUB;
input [15:0] saida;
input [1:0] selectRDM;
input  selectREM;
input  writeAC;
input  writeMEM;
input  writeN;
input  writeOUT;
input  writeRDM;
input  writeREM;
input  writeRI;
input  writeZ;
input sampler_rx;

reg  T0_expected;
reg  T1_expected;
reg  T2_expected;
reg  T3_expected;
reg  T4_expected;
reg  T5_expected;
reg  T6_expected;
reg  T7_expected;
reg  T8_expected;
reg  T9_expected;
reg  a0_expected;
reg  a1_expected;
reg  a2_expected;
reg  a3_expected;
reg  a4_expected;
reg  a5_expected;
reg [15:0] acumulador_expected;
reg  b0_expected;
reg  b1_expected;
reg  b2_expected;
reg  b3_expected;
reg  b4_expected;
reg  b5_expected;
reg [19:0] bcd_expected;
reg  c0_expected;
reg  c1_expected;
reg  c2_expected;
reg  c3_expected;
reg  c4_expected;
reg  c5_expected;
reg  d0_expected;
reg  d1_expected;
reg  d2_expected;
reg  d3_expected;
reg  d4_expected;
reg  d5_expected;
reg  e0_expected;
reg  e1_expected;
reg  e2_expected;
reg  e3_expected;
reg  e4_expected;
reg  e5_expected;
reg  f0_expected;
reg  f1_expected;
reg  f2_expected;
reg  f3_expected;
reg  f4_expected;
reg  f5_expected;
reg  g0_expected;
reg  g1_expected;
reg  g2_expected;
reg  g3_expected;
reg  g4_expected;
reg  g5_expected;
reg  incrementPC_expected;
reg [2:0] opULA_expected;
reg [15:0] qMEM_expected;
reg [15:0] qPC_expected;
reg [15:0] qRDM_expected;
reg [15:0] qREM_expected;
reg [15:0] qRI_expected;
reg  sADD_expected;
reg  sAND_expected;
reg  sDIR_expected;
reg  sHLT_expected;
reg  sIM_expected;
reg  sIN_expected;
reg  sIND_expected;
reg  sJ_expected;
reg  sJN_expected;
reg  sJZ_expected;
reg  sLDA_expected;
reg  sN_expected;
reg  sNOP_expected;
reg  sNOT_expected;
reg  sOR_expected;
reg  sOUT_expected;
reg  sSHL_expected;
reg  sSHR_expected;
reg  sSOP_expected;
reg  sSTA_expected;
reg  sSUB_expected;
reg [15:0] saida_expected;
reg [1:0] selectRDM_expected;
reg  selectREM_expected;
reg  writeAC_expected;
reg  writeMEM_expected;
reg  writeN_expected;
reg  writeOUT_expected;
reg  writeRDM_expected;
reg  writeREM_expected;
reg  writeRI_expected;
reg  writeZ_expected;

reg  T0_prev;
reg  T1_prev;
reg  T2_prev;
reg  T3_prev;
reg  T4_prev;
reg  T5_prev;
reg  T6_prev;
reg  T7_prev;
reg  T8_prev;
reg  T9_prev;
reg  a0_prev;
reg  a1_prev;
reg  a2_prev;
reg  a3_prev;
reg  a4_prev;
reg  a5_prev;
reg [15:0] acumulador_prev;
reg  b0_prev;
reg  b1_prev;
reg  b2_prev;
reg  b3_prev;
reg  b4_prev;
reg  b5_prev;
reg [19:0] bcd_prev;
reg  c0_prev;
reg  c1_prev;
reg  c2_prev;
reg  c3_prev;
reg  c4_prev;
reg  c5_prev;
reg  d0_prev;
reg  d1_prev;
reg  d2_prev;
reg  d3_prev;
reg  d4_prev;
reg  d5_prev;
reg  e0_prev;
reg  e1_prev;
reg  e2_prev;
reg  e3_prev;
reg  e4_prev;
reg  e5_prev;
reg  f0_prev;
reg  f1_prev;
reg  f2_prev;
reg  f3_prev;
reg  f4_prev;
reg  f5_prev;
reg  g0_prev;
reg  g1_prev;
reg  g2_prev;
reg  g3_prev;
reg  g4_prev;
reg  g5_prev;
reg  incrementPC_prev;
reg [2:0] opULA_prev;
reg [15:0] qMEM_prev;
reg [15:0] qPC_prev;
reg [15:0] qRDM_prev;
reg [15:0] qREM_prev;
reg [15:0] qRI_prev;
reg  sADD_prev;
reg  sAND_prev;
reg  sDIR_prev;
reg  sHLT_prev;
reg  sIM_prev;
reg  sIN_prev;
reg  sIND_prev;
reg  sJ_prev;
reg  sJN_prev;
reg  sJZ_prev;
reg  sLDA_prev;
reg  sN_prev;
reg  sNOP_prev;
reg  sNOT_prev;
reg  sOR_prev;
reg  sOUT_prev;
reg  sSHL_prev;
reg  sSHR_prev;
reg  sSOP_prev;
reg  sSTA_prev;
reg  sSUB_prev;
reg [15:0] saida_prev;
reg [1:0] selectRDM_prev;
reg  selectREM_prev;
reg  writeAC_prev;
reg  writeMEM_prev;
reg  writeN_prev;
reg  writeOUT_prev;
reg  writeRDM_prev;
reg  writeREM_prev;
reg  writeRI_prev;
reg  writeZ_prev;

reg  T0_expected_prev;
reg  T1_expected_prev;
reg  T2_expected_prev;
reg  T3_expected_prev;
reg  T4_expected_prev;
reg  T5_expected_prev;
reg  T6_expected_prev;
reg  T7_expected_prev;
reg  T8_expected_prev;
reg  T9_expected_prev;
reg [15:0] acumulador_expected_prev;
reg  incrementPC_expected_prev;
reg [2:0] opULA_expected_prev;
reg [15:0] qMEM_expected_prev;
reg [15:0] qPC_expected_prev;
reg [15:0] qRDM_expected_prev;
reg [15:0] qREM_expected_prev;
reg [15:0] qRI_expected_prev;
reg  sADD_expected_prev;
reg  sAND_expected_prev;
reg  sDIR_expected_prev;
reg  sHLT_expected_prev;
reg  sIM_expected_prev;
reg  sIN_expected_prev;
reg  sIND_expected_prev;
reg  sJ_expected_prev;
reg  sJN_expected_prev;
reg  sJZ_expected_prev;
reg  sLDA_expected_prev;
reg  sNOP_expected_prev;
reg  sNOT_expected_prev;
reg  sOR_expected_prev;
reg  sOUT_expected_prev;
reg  sSHL_expected_prev;
reg  sSHR_expected_prev;
reg  sSOP_expected_prev;
reg  sSTA_expected_prev;
reg  sSUB_expected_prev;
reg [15:0] saida_expected_prev;
reg [1:0] selectRDM_expected_prev;
reg  selectREM_expected_prev;
reg  writeAC_expected_prev;
reg  writeMEM_expected_prev;
reg  writeN_expected_prev;
reg  writeOUT_expected_prev;
reg  writeRDM_expected_prev;
reg  writeREM_expected_prev;
reg  writeRI_expected_prev;
reg  writeZ_expected_prev;

reg  last_T0_exp;
reg  last_T1_exp;
reg  last_T2_exp;
reg  last_T3_exp;
reg  last_T4_exp;
reg  last_T5_exp;
reg  last_T6_exp;
reg  last_T7_exp;
reg  last_T8_exp;
reg  last_T9_exp;
reg [15:0] last_acumulador_exp;
reg  last_incrementPC_exp;
reg [2:0] last_opULA_exp;
reg [15:0] last_qMEM_exp;
reg [15:0] last_qPC_exp;
reg [15:0] last_qRDM_exp;
reg [15:0] last_qREM_exp;
reg [15:0] last_qRI_exp;
reg  last_sADD_exp;
reg  last_sAND_exp;
reg  last_sDIR_exp;
reg  last_sHLT_exp;
reg  last_sIM_exp;
reg  last_sIN_exp;
reg  last_sIND_exp;
reg  last_sJ_exp;
reg  last_sJN_exp;
reg  last_sJZ_exp;
reg  last_sLDA_exp;
reg  last_sNOP_exp;
reg  last_sNOT_exp;
reg  last_sOR_exp;
reg  last_sOUT_exp;
reg  last_sSHL_exp;
reg  last_sSHR_exp;
reg  last_sSOP_exp;
reg  last_sSTA_exp;
reg  last_sSUB_exp;
reg [15:0] last_saida_exp;
reg [1:0] last_selectRDM_exp;
reg  last_selectREM_exp;
reg  last_writeAC_exp;
reg  last_writeMEM_exp;
reg  last_writeN_exp;
reg  last_writeOUT_exp;
reg  last_writeRDM_exp;
reg  last_writeREM_exp;
reg  last_writeRI_exp;
reg  last_writeZ_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:93] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 93'b1;
end

// update real /o prevs

always @(trigger)
begin
	T0_prev = T0;
	T1_prev = T1;
	T2_prev = T2;
	T3_prev = T3;
	T4_prev = T4;
	T5_prev = T5;
	T6_prev = T6;
	T7_prev = T7;
	T8_prev = T8;
	T9_prev = T9;
	a0_prev = a0;
	a1_prev = a1;
	a2_prev = a2;
	a3_prev = a3;
	a4_prev = a4;
	a5_prev = a5;
	acumulador_prev = acumulador;
	b0_prev = b0;
	b1_prev = b1;
	b2_prev = b2;
	b3_prev = b3;
	b4_prev = b4;
	b5_prev = b5;
	bcd_prev = bcd;
	c0_prev = c0;
	c1_prev = c1;
	c2_prev = c2;
	c3_prev = c3;
	c4_prev = c4;
	c5_prev = c5;
	d0_prev = d0;
	d1_prev = d1;
	d2_prev = d2;
	d3_prev = d3;
	d4_prev = d4;
	d5_prev = d5;
	e0_prev = e0;
	e1_prev = e1;
	e2_prev = e2;
	e3_prev = e3;
	e4_prev = e4;
	e5_prev = e5;
	f0_prev = f0;
	f1_prev = f1;
	f2_prev = f2;
	f3_prev = f3;
	f4_prev = f4;
	f5_prev = f5;
	g0_prev = g0;
	g1_prev = g1;
	g2_prev = g2;
	g3_prev = g3;
	g4_prev = g4;
	g5_prev = g5;
	incrementPC_prev = incrementPC;
	opULA_prev = opULA;
	qMEM_prev = qMEM;
	qPC_prev = qPC;
	qRDM_prev = qRDM;
	qREM_prev = qREM;
	qRI_prev = qRI;
	sADD_prev = sADD;
	sAND_prev = sAND;
	sDIR_prev = sDIR;
	sHLT_prev = sHLT;
	sIM_prev = sIM;
	sIN_prev = sIN;
	sIND_prev = sIND;
	sJ_prev = sJ;
	sJN_prev = sJN;
	sJZ_prev = sJZ;
	sLDA_prev = sLDA;
	sN_prev = sN;
	sNOP_prev = sNOP;
	sNOT_prev = sNOT;
	sOR_prev = sOR;
	sOUT_prev = sOUT;
	sSHL_prev = sSHL;
	sSHR_prev = sSHR;
	sSOP_prev = sSOP;
	sSTA_prev = sSTA;
	sSUB_prev = sSUB;
	saida_prev = saida;
	selectRDM_prev = selectRDM;
	selectREM_prev = selectREM;
	writeAC_prev = writeAC;
	writeMEM_prev = writeMEM;
	writeN_prev = writeN;
	writeOUT_prev = writeOUT;
	writeRDM_prev = writeRDM;
	writeREM_prev = writeREM;
	writeRI_prev = writeRI;
	writeZ_prev = writeZ;
end

// update expected /o prevs

always @(trigger)
begin
	T0_expected_prev = T0_expected;
	T1_expected_prev = T1_expected;
	T2_expected_prev = T2_expected;
	T3_expected_prev = T3_expected;
	T4_expected_prev = T4_expected;
	T5_expected_prev = T5_expected;
	T6_expected_prev = T6_expected;
	T7_expected_prev = T7_expected;
	T8_expected_prev = T8_expected;
	T9_expected_prev = T9_expected;
	acumulador_expected_prev = acumulador_expected;
	incrementPC_expected_prev = incrementPC_expected;
	opULA_expected_prev = opULA_expected;
	qMEM_expected_prev = qMEM_expected;
	qPC_expected_prev = qPC_expected;
	qRDM_expected_prev = qRDM_expected;
	qREM_expected_prev = qREM_expected;
	qRI_expected_prev = qRI_expected;
	sADD_expected_prev = sADD_expected;
	sAND_expected_prev = sAND_expected;
	sDIR_expected_prev = sDIR_expected;
	sHLT_expected_prev = sHLT_expected;
	sIM_expected_prev = sIM_expected;
	sIN_expected_prev = sIN_expected;
	sIND_expected_prev = sIND_expected;
	sJ_expected_prev = sJ_expected;
	sJN_expected_prev = sJN_expected;
	sJZ_expected_prev = sJZ_expected;
	sLDA_expected_prev = sLDA_expected;
	sNOP_expected_prev = sNOP_expected;
	sNOT_expected_prev = sNOT_expected;
	sOR_expected_prev = sOR_expected;
	sOUT_expected_prev = sOUT_expected;
	sSHL_expected_prev = sSHL_expected;
	sSHR_expected_prev = sSHR_expected;
	sSOP_expected_prev = sSOP_expected;
	sSTA_expected_prev = sSTA_expected;
	sSUB_expected_prev = sSUB_expected;
	saida_expected_prev = saida_expected;
	selectRDM_expected_prev = selectRDM_expected;
	selectREM_expected_prev = selectREM_expected;
	writeAC_expected_prev = writeAC_expected;
	writeMEM_expected_prev = writeMEM_expected;
	writeN_expected_prev = writeN_expected;
	writeOUT_expected_prev = writeOUT_expected;
	writeRDM_expected_prev = writeRDM_expected;
	writeREM_expected_prev = writeREM_expected;
	writeRI_expected_prev = writeRI_expected;
	writeZ_expected_prev = writeZ_expected;
end



// expected T9
initial
begin
	T9_expected = 1'bX;
	T9_expected = #999000 1'b0;
end 

// expected T8
initial
begin
	T8_expected = 1'bX;
	T8_expected = #999000 1'b0;
end 

// expected T7
initial
begin
	T7_expected = 1'bX;
	T7_expected = #999000 1'b0;
end 

// expected T6
initial
begin
	T6_expected = 1'bX;
	T6_expected = #999000 1'b0;
end 

// expected T5
initial
begin
	T5_expected = 1'bX;
	T5_expected = #999000 1'b0;
end 

// expected T4
initial
begin
	T4_expected = 1'bX;
	T4_expected = #999000 1'b0;
end 

// expected T3
initial
begin
	T3_expected = 1'bX;
	T3_expected = #999000 1'b0;
end 

// expected T2
initial
begin
	T2_expected = 1'bX;
	T2_expected = #999000 1'b0;
end 

// expected T1
initial
begin
	T1_expected = 1'bX;
	T1_expected = #999000 1'b0;
end 

// expected T0
initial
begin
	T0_expected = 1'bX;
	T0_expected = #999000 1'b0;
end 
// expected saida[ 15 ]
initial
begin
	saida_expected[15] = 1'bX;
	saida_expected[15] = #999000 1'b0;
end 
// expected saida[ 14 ]
initial
begin
	saida_expected[14] = 1'bX;
	saida_expected[14] = #999000 1'b0;
end 
// expected saida[ 13 ]
initial
begin
	saida_expected[13] = 1'bX;
	saida_expected[13] = #999000 1'b0;
end 
// expected saida[ 12 ]
initial
begin
	saida_expected[12] = 1'bX;
	saida_expected[12] = #999000 1'b0;
end 
// expected saida[ 11 ]
initial
begin
	saida_expected[11] = 1'bX;
	saida_expected[11] = #999000 1'b0;
end 
// expected saida[ 10 ]
initial
begin
	saida_expected[10] = 1'bX;
	saida_expected[10] = #999000 1'b0;
end 
// expected saida[ 9 ]
initial
begin
	saida_expected[9] = 1'bX;
	saida_expected[9] = #999000 1'b0;
end 
// expected saida[ 8 ]
initial
begin
	saida_expected[8] = 1'bX;
	saida_expected[8] = #999000 1'b0;
end 
// expected saida[ 7 ]
initial
begin
	saida_expected[7] = 1'bX;
	saida_expected[7] = #999000 1'b0;
end 
// expected saida[ 6 ]
initial
begin
	saida_expected[6] = 1'bX;
	saida_expected[6] = #999000 1'b0;
end 
// expected saida[ 5 ]
initial
begin
	saida_expected[5] = 1'bX;
	saida_expected[5] = #999000 1'b0;
end 
// expected saida[ 4 ]
initial
begin
	saida_expected[4] = 1'bX;
	saida_expected[4] = #999000 1'b0;
end 
// expected saida[ 3 ]
initial
begin
	saida_expected[3] = 1'bX;
	saida_expected[3] = #999000 1'b0;
end 
// expected saida[ 2 ]
initial
begin
	saida_expected[2] = 1'bX;
	saida_expected[2] = #999000 1'b0;
end 
// expected saida[ 1 ]
initial
begin
	saida_expected[1] = 1'bX;
	saida_expected[1] = #999000 1'b0;
end 
// expected saida[ 0 ]
initial
begin
	saida_expected[0] = 1'bX;
	saida_expected[0] = #999000 1'b0;
end 
// expected acumulador[ 15 ]
initial
begin
	acumulador_expected[15] = 1'bX;
	acumulador_expected[15] = #999000 1'b0;
end 
// expected acumulador[ 14 ]
initial
begin
	acumulador_expected[14] = 1'bX;
	acumulador_expected[14] = #999000 1'b0;
end 
// expected acumulador[ 13 ]
initial
begin
	acumulador_expected[13] = 1'bX;
	acumulador_expected[13] = #999000 1'b0;
end 
// expected acumulador[ 12 ]
initial
begin
	acumulador_expected[12] = 1'bX;
	acumulador_expected[12] = #999000 1'b0;
end 
// expected acumulador[ 11 ]
initial
begin
	acumulador_expected[11] = 1'bX;
	acumulador_expected[11] = #999000 1'b0;
end 
// expected acumulador[ 10 ]
initial
begin
	acumulador_expected[10] = 1'bX;
	acumulador_expected[10] = #999000 1'b0;
end 
// expected acumulador[ 9 ]
initial
begin
	acumulador_expected[9] = 1'bX;
	acumulador_expected[9] = #999000 1'b0;
end 
// expected acumulador[ 8 ]
initial
begin
	acumulador_expected[8] = 1'bX;
	acumulador_expected[8] = #999000 1'b0;
end 
// expected acumulador[ 7 ]
initial
begin
	acumulador_expected[7] = 1'bX;
	acumulador_expected[7] = #999000 1'b0;
end 
// expected acumulador[ 6 ]
initial
begin
	acumulador_expected[6] = 1'bX;
	acumulador_expected[6] = #999000 1'b0;
end 
// expected acumulador[ 5 ]
initial
begin
	acumulador_expected[5] = 1'bX;
	acumulador_expected[5] = #999000 1'b0;
end 
// expected acumulador[ 4 ]
initial
begin
	acumulador_expected[4] = 1'bX;
	acumulador_expected[4] = #999000 1'b0;
end 
// expected acumulador[ 3 ]
initial
begin
	acumulador_expected[3] = 1'bX;
	acumulador_expected[3] = #999000 1'b0;
end 
// expected acumulador[ 2 ]
initial
begin
	acumulador_expected[2] = 1'bX;
	acumulador_expected[2] = #999000 1'b0;
end 
// expected acumulador[ 1 ]
initial
begin
	acumulador_expected[1] = 1'bX;
	acumulador_expected[1] = #999000 1'b0;
end 
// expected acumulador[ 0 ]
initial
begin
	acumulador_expected[0] = 1'bX;
	acumulador_expected[0] = #999000 1'b0;
end 
// expected qPC[ 15 ]
initial
begin
	qPC_expected[15] = 1'bX;
	qPC_expected[15] = #999000 1'b0;
end 
// expected qPC[ 14 ]
initial
begin
	qPC_expected[14] = 1'bX;
	qPC_expected[14] = #999000 1'b0;
end 
// expected qPC[ 13 ]
initial
begin
	qPC_expected[13] = 1'bX;
	qPC_expected[13] = #999000 1'b0;
end 
// expected qPC[ 12 ]
initial
begin
	qPC_expected[12] = 1'bX;
	qPC_expected[12] = #999000 1'b0;
end 
// expected qPC[ 11 ]
initial
begin
	qPC_expected[11] = 1'bX;
	qPC_expected[11] = #999000 1'b0;
end 
// expected qPC[ 10 ]
initial
begin
	qPC_expected[10] = 1'bX;
	qPC_expected[10] = #999000 1'b0;
end 
// expected qPC[ 9 ]
initial
begin
	qPC_expected[9] = 1'bX;
	qPC_expected[9] = #999000 1'b0;
end 
// expected qPC[ 8 ]
initial
begin
	qPC_expected[8] = 1'bX;
	qPC_expected[8] = #999000 1'b0;
end 
// expected qPC[ 7 ]
initial
begin
	qPC_expected[7] = 1'bX;
	qPC_expected[7] = #999000 1'b0;
end 
// expected qPC[ 6 ]
initial
begin
	qPC_expected[6] = 1'bX;
	qPC_expected[6] = #999000 1'b0;
end 
// expected qPC[ 5 ]
initial
begin
	qPC_expected[5] = 1'bX;
	qPC_expected[5] = #999000 1'b0;
end 
// expected qPC[ 4 ]
initial
begin
	qPC_expected[4] = 1'bX;
	qPC_expected[4] = #999000 1'b0;
end 
// expected qPC[ 3 ]
initial
begin
	qPC_expected[3] = 1'bX;
	qPC_expected[3] = #999000 1'b0;
end 
// expected qPC[ 2 ]
initial
begin
	qPC_expected[2] = 1'bX;
	qPC_expected[2] = #999000 1'b0;
end 
// expected qPC[ 1 ]
initial
begin
	qPC_expected[1] = 1'bX;
	qPC_expected[1] = #999000 1'b0;
end 
// expected qPC[ 0 ]
initial
begin
	qPC_expected[0] = 1'bX;
	qPC_expected[0] = #999000 1'b0;
end 
// expected qRDM[ 15 ]
initial
begin
	qRDM_expected[15] = 1'bX;
	qRDM_expected[15] = #999000 1'b0;
end 
// expected qRDM[ 14 ]
initial
begin
	qRDM_expected[14] = 1'bX;
	qRDM_expected[14] = #999000 1'b0;
end 
// expected qRDM[ 13 ]
initial
begin
	qRDM_expected[13] = 1'bX;
	qRDM_expected[13] = #999000 1'b0;
end 
// expected qRDM[ 12 ]
initial
begin
	qRDM_expected[12] = 1'bX;
	qRDM_expected[12] = #999000 1'b0;
end 
// expected qRDM[ 11 ]
initial
begin
	qRDM_expected[11] = 1'bX;
	qRDM_expected[11] = #999000 1'b0;
end 
// expected qRDM[ 10 ]
initial
begin
	qRDM_expected[10] = 1'bX;
	qRDM_expected[10] = #999000 1'b0;
end 
// expected qRDM[ 9 ]
initial
begin
	qRDM_expected[9] = 1'bX;
	qRDM_expected[9] = #999000 1'b0;
end 
// expected qRDM[ 8 ]
initial
begin
	qRDM_expected[8] = 1'bX;
	qRDM_expected[8] = #999000 1'b0;
end 
// expected qRDM[ 7 ]
initial
begin
	qRDM_expected[7] = 1'bX;
	qRDM_expected[7] = #999000 1'b0;
end 
// expected qRDM[ 6 ]
initial
begin
	qRDM_expected[6] = 1'bX;
	qRDM_expected[6] = #999000 1'b0;
end 
// expected qRDM[ 5 ]
initial
begin
	qRDM_expected[5] = 1'bX;
	qRDM_expected[5] = #999000 1'b0;
end 
// expected qRDM[ 4 ]
initial
begin
	qRDM_expected[4] = 1'bX;
	qRDM_expected[4] = #999000 1'b0;
end 
// expected qRDM[ 3 ]
initial
begin
	qRDM_expected[3] = 1'bX;
	qRDM_expected[3] = #999000 1'b0;
end 
// expected qRDM[ 2 ]
initial
begin
	qRDM_expected[2] = 1'bX;
	qRDM_expected[2] = #999000 1'b0;
end 
// expected qRDM[ 1 ]
initial
begin
	qRDM_expected[1] = 1'bX;
	qRDM_expected[1] = #999000 1'b0;
end 
// expected qRDM[ 0 ]
initial
begin
	qRDM_expected[0] = 1'bX;
	qRDM_expected[0] = #999000 1'b0;
end 
// expected qREM[ 15 ]
initial
begin
	qREM_expected[15] = 1'bX;
	qREM_expected[15] = #999000 1'b0;
end 
// expected qREM[ 14 ]
initial
begin
	qREM_expected[14] = 1'bX;
	qREM_expected[14] = #999000 1'b0;
end 
// expected qREM[ 13 ]
initial
begin
	qREM_expected[13] = 1'bX;
	qREM_expected[13] = #999000 1'b0;
end 
// expected qREM[ 12 ]
initial
begin
	qREM_expected[12] = 1'bX;
	qREM_expected[12] = #999000 1'b0;
end 
// expected qREM[ 11 ]
initial
begin
	qREM_expected[11] = 1'bX;
	qREM_expected[11] = #999000 1'b0;
end 
// expected qREM[ 10 ]
initial
begin
	qREM_expected[10] = 1'bX;
	qREM_expected[10] = #999000 1'b0;
end 
// expected qREM[ 9 ]
initial
begin
	qREM_expected[9] = 1'bX;
	qREM_expected[9] = #999000 1'b0;
end 
// expected qREM[ 8 ]
initial
begin
	qREM_expected[8] = 1'bX;
	qREM_expected[8] = #999000 1'b0;
end 
// expected qREM[ 7 ]
initial
begin
	qREM_expected[7] = 1'bX;
	qREM_expected[7] = #999000 1'b0;
end 
// expected qREM[ 6 ]
initial
begin
	qREM_expected[6] = 1'bX;
	qREM_expected[6] = #999000 1'b0;
end 
// expected qREM[ 5 ]
initial
begin
	qREM_expected[5] = 1'bX;
	qREM_expected[5] = #999000 1'b0;
end 
// expected qREM[ 4 ]
initial
begin
	qREM_expected[4] = 1'bX;
	qREM_expected[4] = #999000 1'b0;
end 
// expected qREM[ 3 ]
initial
begin
	qREM_expected[3] = 1'bX;
	qREM_expected[3] = #999000 1'b0;
end 
// expected qREM[ 2 ]
initial
begin
	qREM_expected[2] = 1'bX;
	qREM_expected[2] = #999000 1'b0;
end 
// expected qREM[ 1 ]
initial
begin
	qREM_expected[1] = 1'bX;
	qREM_expected[1] = #999000 1'b0;
end 
// expected qREM[ 0 ]
initial
begin
	qREM_expected[0] = 1'bX;
	qREM_expected[0] = #999000 1'b0;
end 
// expected qRI[ 15 ]
initial
begin
	qRI_expected[15] = 1'bX;
	qRI_expected[15] = #999000 1'b0;
end 
// expected qRI[ 14 ]
initial
begin
	qRI_expected[14] = 1'bX;
	qRI_expected[14] = #999000 1'b0;
end 
// expected qRI[ 13 ]
initial
begin
	qRI_expected[13] = 1'bX;
	qRI_expected[13] = #999000 1'b0;
end 
// expected qRI[ 12 ]
initial
begin
	qRI_expected[12] = 1'bX;
	qRI_expected[12] = #999000 1'b0;
end 
// expected qRI[ 11 ]
initial
begin
	qRI_expected[11] = 1'bX;
	qRI_expected[11] = #999000 1'b0;
end 
// expected qRI[ 10 ]
initial
begin
	qRI_expected[10] = 1'bX;
	qRI_expected[10] = #999000 1'b0;
end 
// expected qRI[ 9 ]
initial
begin
	qRI_expected[9] = 1'bX;
	qRI_expected[9] = #999000 1'b0;
end 
// expected qRI[ 8 ]
initial
begin
	qRI_expected[8] = 1'bX;
	qRI_expected[8] = #999000 1'b0;
end 
// expected qRI[ 7 ]
initial
begin
	qRI_expected[7] = 1'bX;
	qRI_expected[7] = #999000 1'b0;
end 
// expected qRI[ 6 ]
initial
begin
	qRI_expected[6] = 1'bX;
	qRI_expected[6] = #999000 1'b0;
end 
// expected qRI[ 5 ]
initial
begin
	qRI_expected[5] = 1'bX;
	qRI_expected[5] = #999000 1'b0;
end 
// expected qRI[ 4 ]
initial
begin
	qRI_expected[4] = 1'bX;
	qRI_expected[4] = #999000 1'b0;
end 
// expected qRI[ 3 ]
initial
begin
	qRI_expected[3] = 1'bX;
	qRI_expected[3] = #999000 1'b0;
end 
// expected qRI[ 2 ]
initial
begin
	qRI_expected[2] = 1'bX;
	qRI_expected[2] = #999000 1'b0;
end 
// expected qRI[ 1 ]
initial
begin
	qRI_expected[1] = 1'bX;
	qRI_expected[1] = #999000 1'b0;
end 
// expected qRI[ 0 ]
initial
begin
	qRI_expected[0] = 1'bX;
	qRI_expected[0] = #999000 1'b0;
end 
// expected qMEM[ 15 ]
initial
begin
	qMEM_expected[15] = 1'bX;
	qMEM_expected[15] = #999000 1'b0;
end 
// expected qMEM[ 14 ]
initial
begin
	qMEM_expected[14] = 1'bX;
	qMEM_expected[14] = #999000 1'b0;
end 
// expected qMEM[ 13 ]
initial
begin
	qMEM_expected[13] = 1'bX;
	qMEM_expected[13] = #999000 1'b0;
end 
// expected qMEM[ 12 ]
initial
begin
	qMEM_expected[12] = 1'bX;
	qMEM_expected[12] = #999000 1'b0;
end 
// expected qMEM[ 11 ]
initial
begin
	qMEM_expected[11] = 1'bX;
	qMEM_expected[11] = #999000 1'b0;
end 
// expected qMEM[ 10 ]
initial
begin
	qMEM_expected[10] = 1'bX;
	qMEM_expected[10] = #999000 1'b0;
end 
// expected qMEM[ 9 ]
initial
begin
	qMEM_expected[9] = 1'bX;
	qMEM_expected[9] = #999000 1'b0;
end 
// expected qMEM[ 8 ]
initial
begin
	qMEM_expected[8] = 1'bX;
	qMEM_expected[8] = #999000 1'b0;
end 
// expected qMEM[ 7 ]
initial
begin
	qMEM_expected[7] = 1'bX;
	qMEM_expected[7] = #999000 1'b0;
end 
// expected qMEM[ 6 ]
initial
begin
	qMEM_expected[6] = 1'bX;
	qMEM_expected[6] = #999000 1'b0;
end 
// expected qMEM[ 5 ]
initial
begin
	qMEM_expected[5] = 1'bX;
	qMEM_expected[5] = #999000 1'b0;
end 
// expected qMEM[ 4 ]
initial
begin
	qMEM_expected[4] = 1'bX;
	qMEM_expected[4] = #999000 1'b0;
end 
// expected qMEM[ 3 ]
initial
begin
	qMEM_expected[3] = 1'bX;
	qMEM_expected[3] = #999000 1'b0;
end 
// expected qMEM[ 2 ]
initial
begin
	qMEM_expected[2] = 1'bX;
	qMEM_expected[2] = #999000 1'b0;
end 
// expected qMEM[ 1 ]
initial
begin
	qMEM_expected[1] = 1'bX;
	qMEM_expected[1] = #999000 1'b0;
end 
// expected qMEM[ 0 ]
initial
begin
	qMEM_expected[0] = 1'bX;
	qMEM_expected[0] = #999000 1'b0;
end 

// expected sADD
initial
begin
	sADD_expected = 1'bX;
	sADD_expected = #999000 1'b0;
end 

// expected sAND
initial
begin
	sAND_expected = 1'bX;
	sAND_expected = #999000 1'b0;
end 

// expected sDIR
initial
begin
	sDIR_expected = 1'bX;
	sDIR_expected = #999000 1'b0;
end 

// expected sHLT
initial
begin
	sHLT_expected = 1'bX;
	sHLT_expected = #999000 1'b0;
end 

// expected sIM
initial
begin
	sIM_expected = 1'bX;
	sIM_expected = #999000 1'b0;
end 

// expected sIN
initial
begin
	sIN_expected = 1'bX;
	sIN_expected = #999000 1'b0;
end 

// expected sIND
initial
begin
	sIND_expected = 1'bX;
	sIND_expected = #999000 1'b0;
end 

// expected sJ
initial
begin
	sJ_expected = 1'bX;
	sJ_expected = #999000 1'b0;
end 

// expected sJN
initial
begin
	sJN_expected = 1'bX;
	sJN_expected = #999000 1'b0;
end 

// expected sJZ
initial
begin
	sJZ_expected = 1'bX;
	sJZ_expected = #999000 1'b0;
end 

// expected sLDA
initial
begin
	sLDA_expected = 1'bX;
	sLDA_expected = #999000 1'b0;
end 

// expected sNOP
initial
begin
	sNOP_expected = 1'bX;
	sNOP_expected = #999000 1'b0;
end 

// expected sNOT
initial
begin
	sNOT_expected = 1'bX;
	sNOT_expected = #999000 1'b0;
end 

// expected sOR
initial
begin
	sOR_expected = 1'bX;
	sOR_expected = #999000 1'b0;
end 

// expected sOUT
initial
begin
	sOUT_expected = 1'bX;
	sOUT_expected = #999000 1'b0;
end 

// expected sSHL
initial
begin
	sSHL_expected = 1'bX;
	sSHL_expected = #999000 1'b0;
end 

// expected sSHR
initial
begin
	sSHR_expected = 1'bX;
	sSHR_expected = #999000 1'b0;
end 

// expected sSOP
initial
begin
	sSOP_expected = 1'bX;
	sSOP_expected = #999000 1'b0;
end 

// expected sSTA
initial
begin
	sSTA_expected = 1'bX;
	sSTA_expected = #999000 1'b0;
end 

// expected sSUB
initial
begin
	sSUB_expected = 1'bX;
	sSUB_expected = #999000 1'b0;
end 
// expected selectRDM[ 1 ]
initial
begin
	selectRDM_expected[1] = 1'bX;
	selectRDM_expected[1] = #999000 1'b0;
end 
// expected selectRDM[ 0 ]
initial
begin
	selectRDM_expected[0] = 1'bX;
	selectRDM_expected[0] = #999000 1'b0;
end 
// expected opULA[ 2 ]
initial
begin
	opULA_expected[2] = 1'bX;
	opULA_expected[2] = #999000 1'b0;
end 
// expected opULA[ 1 ]
initial
begin
	opULA_expected[1] = 1'bX;
	opULA_expected[1] = #999000 1'b0;
end 
// expected opULA[ 0 ]
initial
begin
	opULA_expected[0] = 1'bX;
	opULA_expected[0] = #999000 1'b0;
end 

// expected selectREM
initial
begin
	selectREM_expected = 1'bX;
	selectREM_expected = #999000 1'b0;
end 

// expected incrementPC
initial
begin
	incrementPC_expected = 1'bX;
	incrementPC_expected = #999000 1'b0;
end 

// expected writeAC
initial
begin
	writeAC_expected = 1'bX;
	writeAC_expected = #999000 1'b0;
end 

// expected writeMEM
initial
begin
	writeMEM_expected = 1'bX;
	writeMEM_expected = #999000 1'b0;
end 

// expected writeN
initial
begin
	writeN_expected = 1'bX;
	writeN_expected = #999000 1'b0;
end 

// expected writeOUT
initial
begin
	writeOUT_expected = 1'bX;
	writeOUT_expected = #999000 1'b0;
end 

// expected writeRDM
initial
begin
	writeRDM_expected = 1'bX;
	writeRDM_expected = #999000 1'b0;
end 

// expected writeREM
initial
begin
	writeREM_expected = 1'bX;
	writeREM_expected = #999000 1'b0;
end 

// expected writeRI
initial
begin
	writeRI_expected = 1'bX;
	writeRI_expected = #999000 1'b0;
end 

// expected writeZ
initial
begin
	writeZ_expected = 1'bX;
	writeZ_expected = #999000 1'b0;
end 
// generate trigger
always @(T0_expected or T0 or T1_expected or T1 or T2_expected or T2 or T3_expected or T3 or T4_expected or T4 or T5_expected or T5 or T6_expected or T6 or T7_expected or T7 or T8_expected or T8 or T9_expected or T9 or a0_expected or a0 or a1_expected or a1 or a2_expected or a2 or a3_expected or a3 or a4_expected or a4 or a5_expected or a5 or acumulador_expected or acumulador or b0_expected or b0 or b1_expected or b1 or b2_expected or b2 or b3_expected or b3 or b4_expected or b4 or b5_expected or b5 or bcd_expected or bcd or c0_expected or c0 or c1_expected or c1 or c2_expected or c2 or c3_expected or c3 or c4_expected or c4 or c5_expected or c5 or d0_expected or d0 or d1_expected or d1 or d2_expected or d2 or d3_expected or d3 or d4_expected or d4 or d5_expected or d5 or e0_expected or e0 or e1_expected or e1 or e2_expected or e2 or e3_expected or e3 or e4_expected or e4 or e5_expected or e5 or f0_expected or f0 or f1_expected or f1 or f2_expected or f2 or f3_expected or f3 or f4_expected or f4 or f5_expected or f5 or g0_expected or g0 or g1_expected or g1 or g2_expected or g2 or g3_expected or g3 or g4_expected or g4 or g5_expected or g5 or incrementPC_expected or incrementPC or opULA_expected or opULA or qMEM_expected or qMEM or qPC_expected or qPC or qRDM_expected or qRDM or qREM_expected or qREM or qRI_expected or qRI or sADD_expected or sADD or sAND_expected or sAND or sDIR_expected or sDIR or sHLT_expected or sHLT or sIM_expected or sIM or sIN_expected or sIN or sIND_expected or sIND or sJ_expected or sJ or sJN_expected or sJN or sJZ_expected or sJZ or sLDA_expected or sLDA or sN_expected or sN or sNOP_expected or sNOP or sNOT_expected or sNOT or sOR_expected or sOR or sOUT_expected or sOUT or sSHL_expected or sSHL or sSHR_expected or sSHR or sSOP_expected or sSOP or sSTA_expected or sSTA or sSUB_expected or sSUB or saida_expected or saida or selectRDM_expected or selectRDM or selectREM_expected or selectREM or writeAC_expected or writeAC or writeMEM_expected or writeMEM or writeN_expected or writeN or writeOUT_expected or writeOUT or writeRDM_expected or writeRDM or writeREM_expected or writeREM or writeRI_expected or writeRI or writeZ_expected or writeZ)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected T0 = %b | expected T1 = %b | expected T2 = %b | expected T3 = %b | expected T4 = %b | expected T5 = %b | expected T6 = %b | expected T7 = %b | expected T8 = %b | expected T9 = %b | expected a0 = %b | expected a1 = %b | expected a2 = %b | expected a3 = %b | expected a4 = %b | expected a5 = %b | expected acumulador = %b | expected b0 = %b | expected b1 = %b | expected b2 = %b | expected b3 = %b | expected b4 = %b | expected b5 = %b | expected bcd = %b | expected c0 = %b | expected c1 = %b | expected c2 = %b | expected c3 = %b | expected c4 = %b | expected c5 = %b | expected d0 = %b | expected d1 = %b | expected d2 = %b | expected d3 = %b | expected d4 = %b | expected d5 = %b | expected e0 = %b | expected e1 = %b | expected e2 = %b | expected e3 = %b | expected e4 = %b | expected e5 = %b | expected f0 = %b | expected f1 = %b | expected f2 = %b | expected f3 = %b | expected f4 = %b | expected f5 = %b | expected g0 = %b | expected g1 = %b | expected g2 = %b | expected g3 = %b | expected g4 = %b | expected g5 = %b | expected incrementPC = %b | expected opULA = %b | expected qMEM = %b | expected qPC = %b | expected qRDM = %b | expected qREM = %b | expected qRI = %b | expected sADD = %b | expected sAND = %b | expected sDIR = %b | expected sHLT = %b | expected sIM = %b | expected sIN = %b | expected sIND = %b | expected sJ = %b | expected sJN = %b | expected sJZ = %b | expected sLDA = %b | expected sN = %b | expected sNOP = %b | expected sNOT = %b | expected sOR = %b | expected sOUT = %b | expected sSHL = %b | expected sSHR = %b | expected sSOP = %b | expected sSTA = %b | expected sSUB = %b | expected saida = %b | expected selectRDM = %b | expected selectREM = %b | expected writeAC = %b | expected writeMEM = %b | expected writeN = %b | expected writeOUT = %b | expected writeRDM = %b | expected writeREM = %b | expected writeRI = %b | expected writeZ = %b | ",T0_expected_prev,T1_expected_prev,T2_expected_prev,T3_expected_prev,T4_expected_prev,T5_expected_prev,T6_expected_prev,T7_expected_prev,T8_expected_prev,T9_expected_prev,a0_expected_prev,a1_expected_prev,a2_expected_prev,a3_expected_prev,a4_expected_prev,a5_expected_prev,acumulador_expected_prev,b0_expected_prev,b1_expected_prev,b2_expected_prev,b3_expected_prev,b4_expected_prev,b5_expected_prev,bcd_expected_prev,c0_expected_prev,c1_expected_prev,c2_expected_prev,c3_expected_prev,c4_expected_prev,c5_expected_prev,d0_expected_prev,d1_expected_prev,d2_expected_prev,d3_expected_prev,d4_expected_prev,d5_expected_prev,e0_expected_prev,e1_expected_prev,e2_expected_prev,e3_expected_prev,e4_expected_prev,e5_expected_prev,f0_expected_prev,f1_expected_prev,f2_expected_prev,f3_expected_prev,f4_expected_prev,f5_expected_prev,g0_expected_prev,g1_expected_prev,g2_expected_prev,g3_expected_prev,g4_expected_prev,g5_expected_prev,incrementPC_expected_prev,opULA_expected_prev,qMEM_expected_prev,qPC_expected_prev,qRDM_expected_prev,qREM_expected_prev,qRI_expected_prev,sADD_expected_prev,sAND_expected_prev,sDIR_expected_prev,sHLT_expected_prev,sIM_expected_prev,sIN_expected_prev,sIND_expected_prev,sJ_expected_prev,sJN_expected_prev,sJZ_expected_prev,sLDA_expected_prev,sN_expected_prev,sNOP_expected_prev,sNOT_expected_prev,sOR_expected_prev,sOUT_expected_prev,sSHL_expected_prev,sSHR_expected_prev,sSOP_expected_prev,sSTA_expected_prev,sSUB_expected_prev,saida_expected_prev,selectRDM_expected_prev,selectREM_expected_prev,writeAC_expected_prev,writeMEM_expected_prev,writeN_expected_prev,writeOUT_expected_prev,writeRDM_expected_prev,writeREM_expected_prev,writeRI_expected_prev,writeZ_expected_prev);
	$display("| real T0 = %b | real T1 = %b | real T2 = %b | real T3 = %b | real T4 = %b | real T5 = %b | real T6 = %b | real T7 = %b | real T8 = %b | real T9 = %b | real a0 = %b | real a1 = %b | real a2 = %b | real a3 = %b | real a4 = %b | real a5 = %b | real acumulador = %b | real b0 = %b | real b1 = %b | real b2 = %b | real b3 = %b | real b4 = %b | real b5 = %b | real bcd = %b | real c0 = %b | real c1 = %b | real c2 = %b | real c3 = %b | real c4 = %b | real c5 = %b | real d0 = %b | real d1 = %b | real d2 = %b | real d3 = %b | real d4 = %b | real d5 = %b | real e0 = %b | real e1 = %b | real e2 = %b | real e3 = %b | real e4 = %b | real e5 = %b | real f0 = %b | real f1 = %b | real f2 = %b | real f3 = %b | real f4 = %b | real f5 = %b | real g0 = %b | real g1 = %b | real g2 = %b | real g3 = %b | real g4 = %b | real g5 = %b | real incrementPC = %b | real opULA = %b | real qMEM = %b | real qPC = %b | real qRDM = %b | real qREM = %b | real qRI = %b | real sADD = %b | real sAND = %b | real sDIR = %b | real sHLT = %b | real sIM = %b | real sIN = %b | real sIND = %b | real sJ = %b | real sJN = %b | real sJZ = %b | real sLDA = %b | real sN = %b | real sNOP = %b | real sNOT = %b | real sOR = %b | real sOUT = %b | real sSHL = %b | real sSHR = %b | real sSOP = %b | real sSTA = %b | real sSUB = %b | real saida = %b | real selectRDM = %b | real selectREM = %b | real writeAC = %b | real writeMEM = %b | real writeN = %b | real writeOUT = %b | real writeRDM = %b | real writeREM = %b | real writeRI = %b | real writeZ = %b | ",T0_prev,T1_prev,T2_prev,T3_prev,T4_prev,T5_prev,T6_prev,T7_prev,T8_prev,T9_prev,a0_prev,a1_prev,a2_prev,a3_prev,a4_prev,a5_prev,acumulador_prev,b0_prev,b1_prev,b2_prev,b3_prev,b4_prev,b5_prev,bcd_prev,c0_prev,c1_prev,c2_prev,c3_prev,c4_prev,c5_prev,d0_prev,d1_prev,d2_prev,d3_prev,d4_prev,d5_prev,e0_prev,e1_prev,e2_prev,e3_prev,e4_prev,e5_prev,f0_prev,f1_prev,f2_prev,f3_prev,f4_prev,f5_prev,g0_prev,g1_prev,g2_prev,g3_prev,g4_prev,g5_prev,incrementPC_prev,opULA_prev,qMEM_prev,qPC_prev,qRDM_prev,qREM_prev,qRI_prev,sADD_prev,sAND_prev,sDIR_prev,sHLT_prev,sIM_prev,sIN_prev,sIND_prev,sJ_prev,sJN_prev,sJZ_prev,sLDA_prev,sN_prev,sNOP_prev,sNOT_prev,sOR_prev,sOUT_prev,sSHL_prev,sSHR_prev,sSOP_prev,sSTA_prev,sSUB_prev,saida_prev,selectRDM_prev,selectREM_prev,writeAC_prev,writeMEM_prev,writeN_prev,writeOUT_prev,writeRDM_prev,writeREM_prev,writeRI_prev,writeZ_prev);
`endif
	if (
		( T0_expected_prev !== 1'bx ) && ( T0_prev !== T0_expected_prev )
		&& ((T0_expected_prev !== last_T0_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port T0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", T0_expected_prev);
		$display ("     Real value = %b", T0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_T0_exp = T0_expected_prev;
	end
	if (
		( T1_expected_prev !== 1'bx ) && ( T1_prev !== T1_expected_prev )
		&& ((T1_expected_prev !== last_T1_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port T1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", T1_expected_prev);
		$display ("     Real value = %b", T1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_T1_exp = T1_expected_prev;
	end
	if (
		( T2_expected_prev !== 1'bx ) && ( T2_prev !== T2_expected_prev )
		&& ((T2_expected_prev !== last_T2_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port T2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", T2_expected_prev);
		$display ("     Real value = %b", T2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_T2_exp = T2_expected_prev;
	end
	if (
		( T3_expected_prev !== 1'bx ) && ( T3_prev !== T3_expected_prev )
		&& ((T3_expected_prev !== last_T3_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port T3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", T3_expected_prev);
		$display ("     Real value = %b", T3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_T3_exp = T3_expected_prev;
	end
	if (
		( T4_expected_prev !== 1'bx ) && ( T4_prev !== T4_expected_prev )
		&& ((T4_expected_prev !== last_T4_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port T4 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", T4_expected_prev);
		$display ("     Real value = %b", T4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_T4_exp = T4_expected_prev;
	end
	if (
		( T5_expected_prev !== 1'bx ) && ( T5_prev !== T5_expected_prev )
		&& ((T5_expected_prev !== last_T5_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port T5 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", T5_expected_prev);
		$display ("     Real value = %b", T5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_T5_exp = T5_expected_prev;
	end
	if (
		( T6_expected_prev !== 1'bx ) && ( T6_prev !== T6_expected_prev )
		&& ((T6_expected_prev !== last_T6_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port T6 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", T6_expected_prev);
		$display ("     Real value = %b", T6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_T6_exp = T6_expected_prev;
	end
	if (
		( T7_expected_prev !== 1'bx ) && ( T7_prev !== T7_expected_prev )
		&& ((T7_expected_prev !== last_T7_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port T7 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", T7_expected_prev);
		$display ("     Real value = %b", T7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_T7_exp = T7_expected_prev;
	end
	if (
		( T8_expected_prev !== 1'bx ) && ( T8_prev !== T8_expected_prev )
		&& ((T8_expected_prev !== last_T8_exp) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port T8 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", T8_expected_prev);
		$display ("     Real value = %b", T8_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_T8_exp = T8_expected_prev;
	end
	if (
		( T9_expected_prev !== 1'bx ) && ( T9_prev !== T9_expected_prev )
		&& ((T9_expected_prev !== last_T9_exp) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port T9 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", T9_expected_prev);
		$display ("     Real value = %b", T9_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_T9_exp = T9_expected_prev;
	end
	if (
		( acumulador_expected_prev[0] !== 1'bx ) && ( acumulador_prev[0] !== acumulador_expected_prev[0] )
		&& ((acumulador_expected_prev[0] !== last_acumulador_exp[0]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port acumulador[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", acumulador_expected_prev);
		$display ("     Real value = %b", acumulador_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_acumulador_exp[0] = acumulador_expected_prev[0];
	end
	if (
		( acumulador_expected_prev[1] !== 1'bx ) && ( acumulador_prev[1] !== acumulador_expected_prev[1] )
		&& ((acumulador_expected_prev[1] !== last_acumulador_exp[1]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port acumulador[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", acumulador_expected_prev);
		$display ("     Real value = %b", acumulador_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_acumulador_exp[1] = acumulador_expected_prev[1];
	end
	if (
		( acumulador_expected_prev[2] !== 1'bx ) && ( acumulador_prev[2] !== acumulador_expected_prev[2] )
		&& ((acumulador_expected_prev[2] !== last_acumulador_exp[2]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port acumulador[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", acumulador_expected_prev);
		$display ("     Real value = %b", acumulador_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_acumulador_exp[2] = acumulador_expected_prev[2];
	end
	if (
		( acumulador_expected_prev[3] !== 1'bx ) && ( acumulador_prev[3] !== acumulador_expected_prev[3] )
		&& ((acumulador_expected_prev[3] !== last_acumulador_exp[3]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port acumulador[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", acumulador_expected_prev);
		$display ("     Real value = %b", acumulador_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_acumulador_exp[3] = acumulador_expected_prev[3];
	end
	if (
		( acumulador_expected_prev[4] !== 1'bx ) && ( acumulador_prev[4] !== acumulador_expected_prev[4] )
		&& ((acumulador_expected_prev[4] !== last_acumulador_exp[4]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port acumulador[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", acumulador_expected_prev);
		$display ("     Real value = %b", acumulador_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_acumulador_exp[4] = acumulador_expected_prev[4];
	end
	if (
		( acumulador_expected_prev[5] !== 1'bx ) && ( acumulador_prev[5] !== acumulador_expected_prev[5] )
		&& ((acumulador_expected_prev[5] !== last_acumulador_exp[5]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port acumulador[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", acumulador_expected_prev);
		$display ("     Real value = %b", acumulador_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_acumulador_exp[5] = acumulador_expected_prev[5];
	end
	if (
		( acumulador_expected_prev[6] !== 1'bx ) && ( acumulador_prev[6] !== acumulador_expected_prev[6] )
		&& ((acumulador_expected_prev[6] !== last_acumulador_exp[6]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port acumulador[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", acumulador_expected_prev);
		$display ("     Real value = %b", acumulador_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_acumulador_exp[6] = acumulador_expected_prev[6];
	end
	if (
		( acumulador_expected_prev[7] !== 1'bx ) && ( acumulador_prev[7] !== acumulador_expected_prev[7] )
		&& ((acumulador_expected_prev[7] !== last_acumulador_exp[7]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port acumulador[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", acumulador_expected_prev);
		$display ("     Real value = %b", acumulador_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_acumulador_exp[7] = acumulador_expected_prev[7];
	end
	if (
		( acumulador_expected_prev[8] !== 1'bx ) && ( acumulador_prev[8] !== acumulador_expected_prev[8] )
		&& ((acumulador_expected_prev[8] !== last_acumulador_exp[8]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port acumulador[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", acumulador_expected_prev);
		$display ("     Real value = %b", acumulador_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_acumulador_exp[8] = acumulador_expected_prev[8];
	end
	if (
		( acumulador_expected_prev[9] !== 1'bx ) && ( acumulador_prev[9] !== acumulador_expected_prev[9] )
		&& ((acumulador_expected_prev[9] !== last_acumulador_exp[9]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port acumulador[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", acumulador_expected_prev);
		$display ("     Real value = %b", acumulador_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_acumulador_exp[9] = acumulador_expected_prev[9];
	end
	if (
		( acumulador_expected_prev[10] !== 1'bx ) && ( acumulador_prev[10] !== acumulador_expected_prev[10] )
		&& ((acumulador_expected_prev[10] !== last_acumulador_exp[10]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port acumulador[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", acumulador_expected_prev);
		$display ("     Real value = %b", acumulador_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_acumulador_exp[10] = acumulador_expected_prev[10];
	end
	if (
		( acumulador_expected_prev[11] !== 1'bx ) && ( acumulador_prev[11] !== acumulador_expected_prev[11] )
		&& ((acumulador_expected_prev[11] !== last_acumulador_exp[11]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port acumulador[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", acumulador_expected_prev);
		$display ("     Real value = %b", acumulador_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_acumulador_exp[11] = acumulador_expected_prev[11];
	end
	if (
		( acumulador_expected_prev[12] !== 1'bx ) && ( acumulador_prev[12] !== acumulador_expected_prev[12] )
		&& ((acumulador_expected_prev[12] !== last_acumulador_exp[12]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port acumulador[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", acumulador_expected_prev);
		$display ("     Real value = %b", acumulador_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_acumulador_exp[12] = acumulador_expected_prev[12];
	end
	if (
		( acumulador_expected_prev[13] !== 1'bx ) && ( acumulador_prev[13] !== acumulador_expected_prev[13] )
		&& ((acumulador_expected_prev[13] !== last_acumulador_exp[13]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port acumulador[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", acumulador_expected_prev);
		$display ("     Real value = %b", acumulador_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_acumulador_exp[13] = acumulador_expected_prev[13];
	end
	if (
		( acumulador_expected_prev[14] !== 1'bx ) && ( acumulador_prev[14] !== acumulador_expected_prev[14] )
		&& ((acumulador_expected_prev[14] !== last_acumulador_exp[14]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port acumulador[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", acumulador_expected_prev);
		$display ("     Real value = %b", acumulador_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_acumulador_exp[14] = acumulador_expected_prev[14];
	end
	if (
		( acumulador_expected_prev[15] !== 1'bx ) && ( acumulador_prev[15] !== acumulador_expected_prev[15] )
		&& ((acumulador_expected_prev[15] !== last_acumulador_exp[15]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port acumulador[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", acumulador_expected_prev);
		$display ("     Real value = %b", acumulador_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_acumulador_exp[15] = acumulador_expected_prev[15];
	end
	if (
		( incrementPC_expected_prev !== 1'bx ) && ( incrementPC_prev !== incrementPC_expected_prev )
		&& ((incrementPC_expected_prev !== last_incrementPC_exp) ||
			on_first_change[55])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port incrementPC :: @time = %t",  $realtime);
		$display ("     Expected value = %b", incrementPC_expected_prev);
		$display ("     Real value = %b", incrementPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[55] = 1'b0;
		last_incrementPC_exp = incrementPC_expected_prev;
	end
	if (
		( opULA_expected_prev[0] !== 1'bx ) && ( opULA_prev[0] !== opULA_expected_prev[0] )
		&& ((opULA_expected_prev[0] !== last_opULA_exp[0]) ||
			on_first_change[56])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opULA[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opULA_expected_prev);
		$display ("     Real value = %b", opULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[56] = 1'b0;
		last_opULA_exp[0] = opULA_expected_prev[0];
	end
	if (
		( opULA_expected_prev[1] !== 1'bx ) && ( opULA_prev[1] !== opULA_expected_prev[1] )
		&& ((opULA_expected_prev[1] !== last_opULA_exp[1]) ||
			on_first_change[56])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opULA[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opULA_expected_prev);
		$display ("     Real value = %b", opULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[56] = 1'b0;
		last_opULA_exp[1] = opULA_expected_prev[1];
	end
	if (
		( opULA_expected_prev[2] !== 1'bx ) && ( opULA_prev[2] !== opULA_expected_prev[2] )
		&& ((opULA_expected_prev[2] !== last_opULA_exp[2]) ||
			on_first_change[56])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opULA[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opULA_expected_prev);
		$display ("     Real value = %b", opULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[56] = 1'b0;
		last_opULA_exp[2] = opULA_expected_prev[2];
	end
	if (
		( qMEM_expected_prev[0] !== 1'bx ) && ( qMEM_prev[0] !== qMEM_expected_prev[0] )
		&& ((qMEM_expected_prev[0] !== last_qMEM_exp[0]) ||
			on_first_change[57])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port qMEM[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", qMEM_expected_prev);
		$display ("     Real value = %b", qMEM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[57] = 1'b0;
		last_qMEM_exp[0] = qMEM_expected_prev[0];
	end
	if (
		( qMEM_expected_prev[1] !== 1'bx ) && ( qMEM_prev[1] !== qMEM_expected_prev[1] )
		&& ((qMEM_expected_prev[1] !== last_qMEM_exp[1]) ||
			on_first_change[57])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port qMEM[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", qMEM_expected_prev);
		$display ("     Real value = %b", qMEM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[57] = 1'b0;
		last_qMEM_exp[1] = qMEM_expected_prev[1];
	end
	if (
		( qMEM_expected_prev[2] !== 1'bx ) && ( qMEM_prev[2] !== qMEM_expected_prev[2] )
		&& ((qMEM_expected_prev[2] !== last_qMEM_exp[2]) ||
			on_first_change[57])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port qMEM[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", qMEM_expected_prev);
		$display ("     Real value = %b", qMEM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[57] = 1'b0;
		last_qMEM_exp[2] = qMEM_expected_prev[2];
	end
	if (
		( qMEM_expected_prev[3] !== 1'bx ) && ( qMEM_prev[3] !== qMEM_expected_prev[3] )
		&& ((qMEM_expected_prev[3] !== last_qMEM_exp[3]) ||
			on_first_change[57])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port qMEM[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", qMEM_expected_prev);
		$display ("     Real value = %b", qMEM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[57] = 1'b0;
		last_qMEM_exp[3] = qMEM_expected_prev[3];
	end
	if (
		( qMEM_expected_prev[4] !== 1'bx ) && ( qMEM_prev[4] !== qMEM_expected_prev[4] )
		&& ((qMEM_expected_prev[4] !== last_qMEM_exp[4]) ||
			on_first_change[57])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port qMEM[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", qMEM_expected_prev);
		$display ("     Real value = %b", qMEM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[57] = 1'b0;
		last_qMEM_exp[4] = qMEM_expected_prev[4];
	end
	if (
		( qMEM_expected_prev[5] !== 1'bx ) && ( qMEM_prev[5] !== qMEM_expected_prev[5] )
		&& ((qMEM_expected_prev[5] !== last_qMEM_exp[5]) ||
			on_first_change[57])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port qMEM[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", qMEM_expected_prev);
		$display ("     Real value = %b", qMEM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[57] = 1'b0;
		last_qMEM_exp[5] = qMEM_expected_prev[5];
	end
	if (
		( qMEM_expected_prev[6] !== 1'bx ) && ( qMEM_prev[6] !== qMEM_expected_prev[6] )
		&& ((qMEM_expected_prev[6] !== last_qMEM_exp[6]) ||
			on_first_change[57])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port qMEM[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", qMEM_expected_prev);
		$display ("     Real value = %b", qMEM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[57] = 1'b0;
		last_qMEM_exp[6] = qMEM_expected_prev[6];
	end
	if (
		( qMEM_expected_prev[7] !== 1'bx ) && ( qMEM_prev[7] !== qMEM_expected_prev[7] )
		&& ((qMEM_expected_prev[7] !== last_qMEM_exp[7]) ||
			on_first_change[57])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port qMEM[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", qMEM_expected_prev);
		$display ("     Real value = %b", qMEM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[57] = 1'b0;
		last_qMEM_exp[7] = qMEM_expected_prev[7];
	end
	if (
		( qMEM_expected_prev[8] !== 1'bx ) && ( qMEM_prev[8] !== qMEM_expected_prev[8] )
		&& ((qMEM_expected_prev[8] !== last_qMEM_exp[8]) ||
			on_first_change[57])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port qMEM[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", qMEM_expected_prev);
		$display ("     Real value = %b", qMEM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[57] = 1'b0;
		last_qMEM_exp[8] = qMEM_expected_prev[8];
	end
	if (
		( qMEM_expected_prev[9] !== 1'bx ) && ( qMEM_prev[9] !== qMEM_expected_prev[9] )
		&& ((qMEM_expected_prev[9] !== last_qMEM_exp[9]) ||
			on_first_change[57])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port qMEM[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", qMEM_expected_prev);
		$display ("     Real value = %b", qMEM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[57] = 1'b0;
		last_qMEM_exp[9] = qMEM_expected_prev[9];
	end
	if (
		( qMEM_expected_prev[10] !== 1'bx ) && ( qMEM_prev[10] !== qMEM_expected_prev[10] )
		&& ((qMEM_expected_prev[10] !== last_qMEM_exp[10]) ||
			on_first_change[57])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port qMEM[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", qMEM_expected_prev);
		$display ("     Real value = %b", qMEM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[57] = 1'b0;
		last_qMEM_exp[10] = qMEM_expected_prev[10];
	end
	if (
		( qMEM_expected_prev[11] !== 1'bx ) && ( qMEM_prev[11] !== qMEM_expected_prev[11] )
		&& ((qMEM_expected_prev[11] !== last_qMEM_exp[11]) ||
			on_first_change[57])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port qMEM[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", qMEM_expected_prev);
		$display ("     Real value = %b", qMEM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[57] = 1'b0;
		last_qMEM_exp[11] = qMEM_expected_prev[11];
	end
	if (
		( qMEM_expected_prev[12] !== 1'bx ) && ( qMEM_prev[12] !== qMEM_expected_prev[12] )
		&& ((qMEM_expected_prev[12] !== last_qMEM_exp[12]) ||
			on_first_change[57])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port qMEM[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", qMEM_expected_prev);
		$display ("     Real value = %b", qMEM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[57] = 1'b0;
		last_qMEM_exp[12] = qMEM_expected_prev[12];
	end
	if (
		( qMEM_expected_prev[13] !== 1'bx ) && ( qMEM_prev[13] !== qMEM_expected_prev[13] )
		&& ((qMEM_expected_prev[13] !== last_qMEM_exp[13]) ||
			on_first_change[57])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port qMEM[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", qMEM_expected_prev);
		$display ("     Real value = %b", qMEM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[57] = 1'b0;
		last_qMEM_exp[13] = qMEM_expected_prev[13];
	end
	if (
		( qMEM_expected_prev[14] !== 1'bx ) && ( qMEM_prev[14] !== qMEM_expected_prev[14] )
		&& ((qMEM_expected_prev[14] !== last_qMEM_exp[14]) ||
			on_first_change[57])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port qMEM[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", qMEM_expected_prev);
		$display ("     Real value = %b", qMEM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[57] = 1'b0;
		last_qMEM_exp[14] = qMEM_expected_prev[14];
	end
	if (
		( qMEM_expected_prev[15] !== 1'bx ) && ( qMEM_prev[15] !== qMEM_expected_prev[15] )
		&& ((qMEM_expected_prev[15] !== last_qMEM_exp[15]) ||
			on_first_change[57])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port qMEM[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", qMEM_expected_prev);
		$display ("     Real value = %b", qMEM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[57] = 1'b0;
		last_qMEM_exp[15] = qMEM_expected_prev[15];
	end
	if (
		( qPC_expected_prev[0] !== 1'bx ) && ( qPC_prev[0] !== qPC_expected_prev[0] )
		&& ((qPC_expected_prev[0] !== last_qPC_exp[0]) ||
			on_first_change[58])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port qPC[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", qPC_expected_prev);
		$display ("     Real value = %b", qPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[58] = 1'b0;
		last_qPC_exp[0] = qPC_expected_prev[0];
	end
	if (
		( qPC_expected_prev[1] !== 1'bx ) && ( qPC_prev[1] !== qPC_expected_prev[1] )
		&& ((qPC_expected_prev[1] !== last_qPC_exp[1]) ||
			on_first_change[58])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port qPC[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", qPC_expected_prev);
		$display ("     Real value = %b", qPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[58] = 1'b0;
		last_qPC_exp[1] = qPC_expected_prev[1];
	end
	if (
		( qPC_expected_prev[2] !== 1'bx ) && ( qPC_prev[2] !== qPC_expected_prev[2] )
		&& ((qPC_expected_prev[2] !== last_qPC_exp[2]) ||
			on_first_change[58])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port qPC[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", qPC_expected_prev);
		$display ("     Real value = %b", qPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[58] = 1'b0;
		last_qPC_exp[2] = qPC_expected_prev[2];
	end
	if (
		( qPC_expected_prev[3] !== 1'bx ) && ( qPC_prev[3] !== qPC_expected_prev[3] )
		&& ((qPC_expected_prev[3] !== last_qPC_exp[3]) ||
			on_first_change[58])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port qPC[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", qPC_expected_prev);
		$display ("     Real value = %b", qPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[58] = 1'b0;
		last_qPC_exp[3] = qPC_expected_prev[3];
	end
	if (
		( qPC_expected_prev[4] !== 1'bx ) && ( qPC_prev[4] !== qPC_expected_prev[4] )
		&& ((qPC_expected_prev[4] !== last_qPC_exp[4]) ||
			on_first_change[58])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port qPC[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", qPC_expected_prev);
		$display ("     Real value = %b", qPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[58] = 1'b0;
		last_qPC_exp[4] = qPC_expected_prev[4];
	end
	if (
		( qPC_expected_prev[5] !== 1'bx ) && ( qPC_prev[5] !== qPC_expected_prev[5] )
		&& ((qPC_expected_prev[5] !== last_qPC_exp[5]) ||
			on_first_change[58])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port qPC[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", qPC_expected_prev);
		$display ("     Real value = %b", qPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[58] = 1'b0;
		last_qPC_exp[5] = qPC_expected_prev[5];
	end
	if (
		( qPC_expected_prev[6] !== 1'bx ) && ( qPC_prev[6] !== qPC_expected_prev[6] )
		&& ((qPC_expected_prev[6] !== last_qPC_exp[6]) ||
			on_first_change[58])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port qPC[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", qPC_expected_prev);
		$display ("     Real value = %b", qPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[58] = 1'b0;
		last_qPC_exp[6] = qPC_expected_prev[6];
	end
	if (
		( qPC_expected_prev[7] !== 1'bx ) && ( qPC_prev[7] !== qPC_expected_prev[7] )
		&& ((qPC_expected_prev[7] !== last_qPC_exp[7]) ||
			on_first_change[58])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port qPC[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", qPC_expected_prev);
		$display ("     Real value = %b", qPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[58] = 1'b0;
		last_qPC_exp[7] = qPC_expected_prev[7];
	end
	if (
		( qPC_expected_prev[8] !== 1'bx ) && ( qPC_prev[8] !== qPC_expected_prev[8] )
		&& ((qPC_expected_prev[8] !== last_qPC_exp[8]) ||
			on_first_change[58])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port qPC[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", qPC_expected_prev);
		$display ("     Real value = %b", qPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[58] = 1'b0;
		last_qPC_exp[8] = qPC_expected_prev[8];
	end
	if (
		( qPC_expected_prev[9] !== 1'bx ) && ( qPC_prev[9] !== qPC_expected_prev[9] )
		&& ((qPC_expected_prev[9] !== last_qPC_exp[9]) ||
			on_first_change[58])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port qPC[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", qPC_expected_prev);
		$display ("     Real value = %b", qPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[58] = 1'b0;
		last_qPC_exp[9] = qPC_expected_prev[9];
	end
	if (
		( qPC_expected_prev[10] !== 1'bx ) && ( qPC_prev[10] !== qPC_expected_prev[10] )
		&& ((qPC_expected_prev[10] !== last_qPC_exp[10]) ||
			on_first_change[58])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port qPC[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", qPC_expected_prev);
		$display ("     Real value = %b", qPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[58] = 1'b0;
		last_qPC_exp[10] = qPC_expected_prev[10];
	end
	if (
		( qPC_expected_prev[11] !== 1'bx ) && ( qPC_prev[11] !== qPC_expected_prev[11] )
		&& ((qPC_expected_prev[11] !== last_qPC_exp[11]) ||
			on_first_change[58])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port qPC[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", qPC_expected_prev);
		$display ("     Real value = %b", qPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[58] = 1'b0;
		last_qPC_exp[11] = qPC_expected_prev[11];
	end
	if (
		( qPC_expected_prev[12] !== 1'bx ) && ( qPC_prev[12] !== qPC_expected_prev[12] )
		&& ((qPC_expected_prev[12] !== last_qPC_exp[12]) ||
			on_first_change[58])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port qPC[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", qPC_expected_prev);
		$display ("     Real value = %b", qPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[58] = 1'b0;
		last_qPC_exp[12] = qPC_expected_prev[12];
	end
	if (
		( qPC_expected_prev[13] !== 1'bx ) && ( qPC_prev[13] !== qPC_expected_prev[13] )
		&& ((qPC_expected_prev[13] !== last_qPC_exp[13]) ||
			on_first_change[58])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port qPC[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", qPC_expected_prev);
		$display ("     Real value = %b", qPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[58] = 1'b0;
		last_qPC_exp[13] = qPC_expected_prev[13];
	end
	if (
		( qPC_expected_prev[14] !== 1'bx ) && ( qPC_prev[14] !== qPC_expected_prev[14] )
		&& ((qPC_expected_prev[14] !== last_qPC_exp[14]) ||
			on_first_change[58])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port qPC[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", qPC_expected_prev);
		$display ("     Real value = %b", qPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[58] = 1'b0;
		last_qPC_exp[14] = qPC_expected_prev[14];
	end
	if (
		( qPC_expected_prev[15] !== 1'bx ) && ( qPC_prev[15] !== qPC_expected_prev[15] )
		&& ((qPC_expected_prev[15] !== last_qPC_exp[15]) ||
			on_first_change[58])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port qPC[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", qPC_expected_prev);
		$display ("     Real value = %b", qPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[58] = 1'b0;
		last_qPC_exp[15] = qPC_expected_prev[15];
	end
	if (
		( qRDM_expected_prev[0] !== 1'bx ) && ( qRDM_prev[0] !== qRDM_expected_prev[0] )
		&& ((qRDM_expected_prev[0] !== last_qRDM_exp[0]) ||
			on_first_change[59])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port qRDM[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", qRDM_expected_prev);
		$display ("     Real value = %b", qRDM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[59] = 1'b0;
		last_qRDM_exp[0] = qRDM_expected_prev[0];
	end
	if (
		( qRDM_expected_prev[1] !== 1'bx ) && ( qRDM_prev[1] !== qRDM_expected_prev[1] )
		&& ((qRDM_expected_prev[1] !== last_qRDM_exp[1]) ||
			on_first_change[59])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port qRDM[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", qRDM_expected_prev);
		$display ("     Real value = %b", qRDM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[59] = 1'b0;
		last_qRDM_exp[1] = qRDM_expected_prev[1];
	end
	if (
		( qRDM_expected_prev[2] !== 1'bx ) && ( qRDM_prev[2] !== qRDM_expected_prev[2] )
		&& ((qRDM_expected_prev[2] !== last_qRDM_exp[2]) ||
			on_first_change[59])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port qRDM[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", qRDM_expected_prev);
		$display ("     Real value = %b", qRDM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[59] = 1'b0;
		last_qRDM_exp[2] = qRDM_expected_prev[2];
	end
	if (
		( qRDM_expected_prev[3] !== 1'bx ) && ( qRDM_prev[3] !== qRDM_expected_prev[3] )
		&& ((qRDM_expected_prev[3] !== last_qRDM_exp[3]) ||
			on_first_change[59])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port qRDM[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", qRDM_expected_prev);
		$display ("     Real value = %b", qRDM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[59] = 1'b0;
		last_qRDM_exp[3] = qRDM_expected_prev[3];
	end
	if (
		( qRDM_expected_prev[4] !== 1'bx ) && ( qRDM_prev[4] !== qRDM_expected_prev[4] )
		&& ((qRDM_expected_prev[4] !== last_qRDM_exp[4]) ||
			on_first_change[59])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port qRDM[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", qRDM_expected_prev);
		$display ("     Real value = %b", qRDM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[59] = 1'b0;
		last_qRDM_exp[4] = qRDM_expected_prev[4];
	end
	if (
		( qRDM_expected_prev[5] !== 1'bx ) && ( qRDM_prev[5] !== qRDM_expected_prev[5] )
		&& ((qRDM_expected_prev[5] !== last_qRDM_exp[5]) ||
			on_first_change[59])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port qRDM[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", qRDM_expected_prev);
		$display ("     Real value = %b", qRDM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[59] = 1'b0;
		last_qRDM_exp[5] = qRDM_expected_prev[5];
	end
	if (
		( qRDM_expected_prev[6] !== 1'bx ) && ( qRDM_prev[6] !== qRDM_expected_prev[6] )
		&& ((qRDM_expected_prev[6] !== last_qRDM_exp[6]) ||
			on_first_change[59])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port qRDM[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", qRDM_expected_prev);
		$display ("     Real value = %b", qRDM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[59] = 1'b0;
		last_qRDM_exp[6] = qRDM_expected_prev[6];
	end
	if (
		( qRDM_expected_prev[7] !== 1'bx ) && ( qRDM_prev[7] !== qRDM_expected_prev[7] )
		&& ((qRDM_expected_prev[7] !== last_qRDM_exp[7]) ||
			on_first_change[59])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port qRDM[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", qRDM_expected_prev);
		$display ("     Real value = %b", qRDM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[59] = 1'b0;
		last_qRDM_exp[7] = qRDM_expected_prev[7];
	end
	if (
		( qRDM_expected_prev[8] !== 1'bx ) && ( qRDM_prev[8] !== qRDM_expected_prev[8] )
		&& ((qRDM_expected_prev[8] !== last_qRDM_exp[8]) ||
			on_first_change[59])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port qRDM[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", qRDM_expected_prev);
		$display ("     Real value = %b", qRDM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[59] = 1'b0;
		last_qRDM_exp[8] = qRDM_expected_prev[8];
	end
	if (
		( qRDM_expected_prev[9] !== 1'bx ) && ( qRDM_prev[9] !== qRDM_expected_prev[9] )
		&& ((qRDM_expected_prev[9] !== last_qRDM_exp[9]) ||
			on_first_change[59])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port qRDM[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", qRDM_expected_prev);
		$display ("     Real value = %b", qRDM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[59] = 1'b0;
		last_qRDM_exp[9] = qRDM_expected_prev[9];
	end
	if (
		( qRDM_expected_prev[10] !== 1'bx ) && ( qRDM_prev[10] !== qRDM_expected_prev[10] )
		&& ((qRDM_expected_prev[10] !== last_qRDM_exp[10]) ||
			on_first_change[59])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port qRDM[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", qRDM_expected_prev);
		$display ("     Real value = %b", qRDM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[59] = 1'b0;
		last_qRDM_exp[10] = qRDM_expected_prev[10];
	end
	if (
		( qRDM_expected_prev[11] !== 1'bx ) && ( qRDM_prev[11] !== qRDM_expected_prev[11] )
		&& ((qRDM_expected_prev[11] !== last_qRDM_exp[11]) ||
			on_first_change[59])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port qRDM[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", qRDM_expected_prev);
		$display ("     Real value = %b", qRDM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[59] = 1'b0;
		last_qRDM_exp[11] = qRDM_expected_prev[11];
	end
	if (
		( qRDM_expected_prev[12] !== 1'bx ) && ( qRDM_prev[12] !== qRDM_expected_prev[12] )
		&& ((qRDM_expected_prev[12] !== last_qRDM_exp[12]) ||
			on_first_change[59])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port qRDM[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", qRDM_expected_prev);
		$display ("     Real value = %b", qRDM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[59] = 1'b0;
		last_qRDM_exp[12] = qRDM_expected_prev[12];
	end
	if (
		( qRDM_expected_prev[13] !== 1'bx ) && ( qRDM_prev[13] !== qRDM_expected_prev[13] )
		&& ((qRDM_expected_prev[13] !== last_qRDM_exp[13]) ||
			on_first_change[59])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port qRDM[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", qRDM_expected_prev);
		$display ("     Real value = %b", qRDM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[59] = 1'b0;
		last_qRDM_exp[13] = qRDM_expected_prev[13];
	end
	if (
		( qRDM_expected_prev[14] !== 1'bx ) && ( qRDM_prev[14] !== qRDM_expected_prev[14] )
		&& ((qRDM_expected_prev[14] !== last_qRDM_exp[14]) ||
			on_first_change[59])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port qRDM[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", qRDM_expected_prev);
		$display ("     Real value = %b", qRDM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[59] = 1'b0;
		last_qRDM_exp[14] = qRDM_expected_prev[14];
	end
	if (
		( qRDM_expected_prev[15] !== 1'bx ) && ( qRDM_prev[15] !== qRDM_expected_prev[15] )
		&& ((qRDM_expected_prev[15] !== last_qRDM_exp[15]) ||
			on_first_change[59])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port qRDM[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", qRDM_expected_prev);
		$display ("     Real value = %b", qRDM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[59] = 1'b0;
		last_qRDM_exp[15] = qRDM_expected_prev[15];
	end
	if (
		( qREM_expected_prev[0] !== 1'bx ) && ( qREM_prev[0] !== qREM_expected_prev[0] )
		&& ((qREM_expected_prev[0] !== last_qREM_exp[0]) ||
			on_first_change[60])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port qREM[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", qREM_expected_prev);
		$display ("     Real value = %b", qREM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[60] = 1'b0;
		last_qREM_exp[0] = qREM_expected_prev[0];
	end
	if (
		( qREM_expected_prev[1] !== 1'bx ) && ( qREM_prev[1] !== qREM_expected_prev[1] )
		&& ((qREM_expected_prev[1] !== last_qREM_exp[1]) ||
			on_first_change[60])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port qREM[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", qREM_expected_prev);
		$display ("     Real value = %b", qREM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[60] = 1'b0;
		last_qREM_exp[1] = qREM_expected_prev[1];
	end
	if (
		( qREM_expected_prev[2] !== 1'bx ) && ( qREM_prev[2] !== qREM_expected_prev[2] )
		&& ((qREM_expected_prev[2] !== last_qREM_exp[2]) ||
			on_first_change[60])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port qREM[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", qREM_expected_prev);
		$display ("     Real value = %b", qREM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[60] = 1'b0;
		last_qREM_exp[2] = qREM_expected_prev[2];
	end
	if (
		( qREM_expected_prev[3] !== 1'bx ) && ( qREM_prev[3] !== qREM_expected_prev[3] )
		&& ((qREM_expected_prev[3] !== last_qREM_exp[3]) ||
			on_first_change[60])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port qREM[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", qREM_expected_prev);
		$display ("     Real value = %b", qREM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[60] = 1'b0;
		last_qREM_exp[3] = qREM_expected_prev[3];
	end
	if (
		( qREM_expected_prev[4] !== 1'bx ) && ( qREM_prev[4] !== qREM_expected_prev[4] )
		&& ((qREM_expected_prev[4] !== last_qREM_exp[4]) ||
			on_first_change[60])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port qREM[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", qREM_expected_prev);
		$display ("     Real value = %b", qREM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[60] = 1'b0;
		last_qREM_exp[4] = qREM_expected_prev[4];
	end
	if (
		( qREM_expected_prev[5] !== 1'bx ) && ( qREM_prev[5] !== qREM_expected_prev[5] )
		&& ((qREM_expected_prev[5] !== last_qREM_exp[5]) ||
			on_first_change[60])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port qREM[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", qREM_expected_prev);
		$display ("     Real value = %b", qREM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[60] = 1'b0;
		last_qREM_exp[5] = qREM_expected_prev[5];
	end
	if (
		( qREM_expected_prev[6] !== 1'bx ) && ( qREM_prev[6] !== qREM_expected_prev[6] )
		&& ((qREM_expected_prev[6] !== last_qREM_exp[6]) ||
			on_first_change[60])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port qREM[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", qREM_expected_prev);
		$display ("     Real value = %b", qREM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[60] = 1'b0;
		last_qREM_exp[6] = qREM_expected_prev[6];
	end
	if (
		( qREM_expected_prev[7] !== 1'bx ) && ( qREM_prev[7] !== qREM_expected_prev[7] )
		&& ((qREM_expected_prev[7] !== last_qREM_exp[7]) ||
			on_first_change[60])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port qREM[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", qREM_expected_prev);
		$display ("     Real value = %b", qREM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[60] = 1'b0;
		last_qREM_exp[7] = qREM_expected_prev[7];
	end
	if (
		( qREM_expected_prev[8] !== 1'bx ) && ( qREM_prev[8] !== qREM_expected_prev[8] )
		&& ((qREM_expected_prev[8] !== last_qREM_exp[8]) ||
			on_first_change[60])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port qREM[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", qREM_expected_prev);
		$display ("     Real value = %b", qREM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[60] = 1'b0;
		last_qREM_exp[8] = qREM_expected_prev[8];
	end
	if (
		( qREM_expected_prev[9] !== 1'bx ) && ( qREM_prev[9] !== qREM_expected_prev[9] )
		&& ((qREM_expected_prev[9] !== last_qREM_exp[9]) ||
			on_first_change[60])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port qREM[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", qREM_expected_prev);
		$display ("     Real value = %b", qREM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[60] = 1'b0;
		last_qREM_exp[9] = qREM_expected_prev[9];
	end
	if (
		( qREM_expected_prev[10] !== 1'bx ) && ( qREM_prev[10] !== qREM_expected_prev[10] )
		&& ((qREM_expected_prev[10] !== last_qREM_exp[10]) ||
			on_first_change[60])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port qREM[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", qREM_expected_prev);
		$display ("     Real value = %b", qREM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[60] = 1'b0;
		last_qREM_exp[10] = qREM_expected_prev[10];
	end
	if (
		( qREM_expected_prev[11] !== 1'bx ) && ( qREM_prev[11] !== qREM_expected_prev[11] )
		&& ((qREM_expected_prev[11] !== last_qREM_exp[11]) ||
			on_first_change[60])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port qREM[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", qREM_expected_prev);
		$display ("     Real value = %b", qREM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[60] = 1'b0;
		last_qREM_exp[11] = qREM_expected_prev[11];
	end
	if (
		( qREM_expected_prev[12] !== 1'bx ) && ( qREM_prev[12] !== qREM_expected_prev[12] )
		&& ((qREM_expected_prev[12] !== last_qREM_exp[12]) ||
			on_first_change[60])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port qREM[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", qREM_expected_prev);
		$display ("     Real value = %b", qREM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[60] = 1'b0;
		last_qREM_exp[12] = qREM_expected_prev[12];
	end
	if (
		( qREM_expected_prev[13] !== 1'bx ) && ( qREM_prev[13] !== qREM_expected_prev[13] )
		&& ((qREM_expected_prev[13] !== last_qREM_exp[13]) ||
			on_first_change[60])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port qREM[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", qREM_expected_prev);
		$display ("     Real value = %b", qREM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[60] = 1'b0;
		last_qREM_exp[13] = qREM_expected_prev[13];
	end
	if (
		( qREM_expected_prev[14] !== 1'bx ) && ( qREM_prev[14] !== qREM_expected_prev[14] )
		&& ((qREM_expected_prev[14] !== last_qREM_exp[14]) ||
			on_first_change[60])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port qREM[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", qREM_expected_prev);
		$display ("     Real value = %b", qREM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[60] = 1'b0;
		last_qREM_exp[14] = qREM_expected_prev[14];
	end
	if (
		( qREM_expected_prev[15] !== 1'bx ) && ( qREM_prev[15] !== qREM_expected_prev[15] )
		&& ((qREM_expected_prev[15] !== last_qREM_exp[15]) ||
			on_first_change[60])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port qREM[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", qREM_expected_prev);
		$display ("     Real value = %b", qREM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[60] = 1'b0;
		last_qREM_exp[15] = qREM_expected_prev[15];
	end
	if (
		( qRI_expected_prev[0] !== 1'bx ) && ( qRI_prev[0] !== qRI_expected_prev[0] )
		&& ((qRI_expected_prev[0] !== last_qRI_exp[0]) ||
			on_first_change[61])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port qRI[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", qRI_expected_prev);
		$display ("     Real value = %b", qRI_prev);
		nummismatches = nummismatches + 1;
		on_first_change[61] = 1'b0;
		last_qRI_exp[0] = qRI_expected_prev[0];
	end
	if (
		( qRI_expected_prev[1] !== 1'bx ) && ( qRI_prev[1] !== qRI_expected_prev[1] )
		&& ((qRI_expected_prev[1] !== last_qRI_exp[1]) ||
			on_first_change[61])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port qRI[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", qRI_expected_prev);
		$display ("     Real value = %b", qRI_prev);
		nummismatches = nummismatches + 1;
		on_first_change[61] = 1'b0;
		last_qRI_exp[1] = qRI_expected_prev[1];
	end
	if (
		( qRI_expected_prev[2] !== 1'bx ) && ( qRI_prev[2] !== qRI_expected_prev[2] )
		&& ((qRI_expected_prev[2] !== last_qRI_exp[2]) ||
			on_first_change[61])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port qRI[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", qRI_expected_prev);
		$display ("     Real value = %b", qRI_prev);
		nummismatches = nummismatches + 1;
		on_first_change[61] = 1'b0;
		last_qRI_exp[2] = qRI_expected_prev[2];
	end
	if (
		( qRI_expected_prev[3] !== 1'bx ) && ( qRI_prev[3] !== qRI_expected_prev[3] )
		&& ((qRI_expected_prev[3] !== last_qRI_exp[3]) ||
			on_first_change[61])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port qRI[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", qRI_expected_prev);
		$display ("     Real value = %b", qRI_prev);
		nummismatches = nummismatches + 1;
		on_first_change[61] = 1'b0;
		last_qRI_exp[3] = qRI_expected_prev[3];
	end
	if (
		( qRI_expected_prev[4] !== 1'bx ) && ( qRI_prev[4] !== qRI_expected_prev[4] )
		&& ((qRI_expected_prev[4] !== last_qRI_exp[4]) ||
			on_first_change[61])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port qRI[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", qRI_expected_prev);
		$display ("     Real value = %b", qRI_prev);
		nummismatches = nummismatches + 1;
		on_first_change[61] = 1'b0;
		last_qRI_exp[4] = qRI_expected_prev[4];
	end
	if (
		( qRI_expected_prev[5] !== 1'bx ) && ( qRI_prev[5] !== qRI_expected_prev[5] )
		&& ((qRI_expected_prev[5] !== last_qRI_exp[5]) ||
			on_first_change[61])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port qRI[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", qRI_expected_prev);
		$display ("     Real value = %b", qRI_prev);
		nummismatches = nummismatches + 1;
		on_first_change[61] = 1'b0;
		last_qRI_exp[5] = qRI_expected_prev[5];
	end
	if (
		( qRI_expected_prev[6] !== 1'bx ) && ( qRI_prev[6] !== qRI_expected_prev[6] )
		&& ((qRI_expected_prev[6] !== last_qRI_exp[6]) ||
			on_first_change[61])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port qRI[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", qRI_expected_prev);
		$display ("     Real value = %b", qRI_prev);
		nummismatches = nummismatches + 1;
		on_first_change[61] = 1'b0;
		last_qRI_exp[6] = qRI_expected_prev[6];
	end
	if (
		( qRI_expected_prev[7] !== 1'bx ) && ( qRI_prev[7] !== qRI_expected_prev[7] )
		&& ((qRI_expected_prev[7] !== last_qRI_exp[7]) ||
			on_first_change[61])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port qRI[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", qRI_expected_prev);
		$display ("     Real value = %b", qRI_prev);
		nummismatches = nummismatches + 1;
		on_first_change[61] = 1'b0;
		last_qRI_exp[7] = qRI_expected_prev[7];
	end
	if (
		( qRI_expected_prev[8] !== 1'bx ) && ( qRI_prev[8] !== qRI_expected_prev[8] )
		&& ((qRI_expected_prev[8] !== last_qRI_exp[8]) ||
			on_first_change[61])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port qRI[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", qRI_expected_prev);
		$display ("     Real value = %b", qRI_prev);
		nummismatches = nummismatches + 1;
		on_first_change[61] = 1'b0;
		last_qRI_exp[8] = qRI_expected_prev[8];
	end
	if (
		( qRI_expected_prev[9] !== 1'bx ) && ( qRI_prev[9] !== qRI_expected_prev[9] )
		&& ((qRI_expected_prev[9] !== last_qRI_exp[9]) ||
			on_first_change[61])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port qRI[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", qRI_expected_prev);
		$display ("     Real value = %b", qRI_prev);
		nummismatches = nummismatches + 1;
		on_first_change[61] = 1'b0;
		last_qRI_exp[9] = qRI_expected_prev[9];
	end
	if (
		( qRI_expected_prev[10] !== 1'bx ) && ( qRI_prev[10] !== qRI_expected_prev[10] )
		&& ((qRI_expected_prev[10] !== last_qRI_exp[10]) ||
			on_first_change[61])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port qRI[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", qRI_expected_prev);
		$display ("     Real value = %b", qRI_prev);
		nummismatches = nummismatches + 1;
		on_first_change[61] = 1'b0;
		last_qRI_exp[10] = qRI_expected_prev[10];
	end
	if (
		( qRI_expected_prev[11] !== 1'bx ) && ( qRI_prev[11] !== qRI_expected_prev[11] )
		&& ((qRI_expected_prev[11] !== last_qRI_exp[11]) ||
			on_first_change[61])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port qRI[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", qRI_expected_prev);
		$display ("     Real value = %b", qRI_prev);
		nummismatches = nummismatches + 1;
		on_first_change[61] = 1'b0;
		last_qRI_exp[11] = qRI_expected_prev[11];
	end
	if (
		( qRI_expected_prev[12] !== 1'bx ) && ( qRI_prev[12] !== qRI_expected_prev[12] )
		&& ((qRI_expected_prev[12] !== last_qRI_exp[12]) ||
			on_first_change[61])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port qRI[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", qRI_expected_prev);
		$display ("     Real value = %b", qRI_prev);
		nummismatches = nummismatches + 1;
		on_first_change[61] = 1'b0;
		last_qRI_exp[12] = qRI_expected_prev[12];
	end
	if (
		( qRI_expected_prev[13] !== 1'bx ) && ( qRI_prev[13] !== qRI_expected_prev[13] )
		&& ((qRI_expected_prev[13] !== last_qRI_exp[13]) ||
			on_first_change[61])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port qRI[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", qRI_expected_prev);
		$display ("     Real value = %b", qRI_prev);
		nummismatches = nummismatches + 1;
		on_first_change[61] = 1'b0;
		last_qRI_exp[13] = qRI_expected_prev[13];
	end
	if (
		( qRI_expected_prev[14] !== 1'bx ) && ( qRI_prev[14] !== qRI_expected_prev[14] )
		&& ((qRI_expected_prev[14] !== last_qRI_exp[14]) ||
			on_first_change[61])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port qRI[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", qRI_expected_prev);
		$display ("     Real value = %b", qRI_prev);
		nummismatches = nummismatches + 1;
		on_first_change[61] = 1'b0;
		last_qRI_exp[14] = qRI_expected_prev[14];
	end
	if (
		( qRI_expected_prev[15] !== 1'bx ) && ( qRI_prev[15] !== qRI_expected_prev[15] )
		&& ((qRI_expected_prev[15] !== last_qRI_exp[15]) ||
			on_first_change[61])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port qRI[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", qRI_expected_prev);
		$display ("     Real value = %b", qRI_prev);
		nummismatches = nummismatches + 1;
		on_first_change[61] = 1'b0;
		last_qRI_exp[15] = qRI_expected_prev[15];
	end
	if (
		( sADD_expected_prev !== 1'bx ) && ( sADD_prev !== sADD_expected_prev )
		&& ((sADD_expected_prev !== last_sADD_exp) ||
			on_first_change[62])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sADD :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sADD_expected_prev);
		$display ("     Real value = %b", sADD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[62] = 1'b0;
		last_sADD_exp = sADD_expected_prev;
	end
	if (
		( sAND_expected_prev !== 1'bx ) && ( sAND_prev !== sAND_expected_prev )
		&& ((sAND_expected_prev !== last_sAND_exp) ||
			on_first_change[63])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sAND :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sAND_expected_prev);
		$display ("     Real value = %b", sAND_prev);
		nummismatches = nummismatches + 1;
		on_first_change[63] = 1'b0;
		last_sAND_exp = sAND_expected_prev;
	end
	if (
		( sDIR_expected_prev !== 1'bx ) && ( sDIR_prev !== sDIR_expected_prev )
		&& ((sDIR_expected_prev !== last_sDIR_exp) ||
			on_first_change[64])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sDIR :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sDIR_expected_prev);
		$display ("     Real value = %b", sDIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[64] = 1'b0;
		last_sDIR_exp = sDIR_expected_prev;
	end
	if (
		( sHLT_expected_prev !== 1'bx ) && ( sHLT_prev !== sHLT_expected_prev )
		&& ((sHLT_expected_prev !== last_sHLT_exp) ||
			on_first_change[65])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sHLT :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sHLT_expected_prev);
		$display ("     Real value = %b", sHLT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[65] = 1'b0;
		last_sHLT_exp = sHLT_expected_prev;
	end
	if (
		( sIM_expected_prev !== 1'bx ) && ( sIM_prev !== sIM_expected_prev )
		&& ((sIM_expected_prev !== last_sIM_exp) ||
			on_first_change[66])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sIM :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sIM_expected_prev);
		$display ("     Real value = %b", sIM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[66] = 1'b0;
		last_sIM_exp = sIM_expected_prev;
	end
	if (
		( sIN_expected_prev !== 1'bx ) && ( sIN_prev !== sIN_expected_prev )
		&& ((sIN_expected_prev !== last_sIN_exp) ||
			on_first_change[67])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sIN :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sIN_expected_prev);
		$display ("     Real value = %b", sIN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[67] = 1'b0;
		last_sIN_exp = sIN_expected_prev;
	end
	if (
		( sIND_expected_prev !== 1'bx ) && ( sIND_prev !== sIND_expected_prev )
		&& ((sIND_expected_prev !== last_sIND_exp) ||
			on_first_change[68])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sIND :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sIND_expected_prev);
		$display ("     Real value = %b", sIND_prev);
		nummismatches = nummismatches + 1;
		on_first_change[68] = 1'b0;
		last_sIND_exp = sIND_expected_prev;
	end
	if (
		( sJ_expected_prev !== 1'bx ) && ( sJ_prev !== sJ_expected_prev )
		&& ((sJ_expected_prev !== last_sJ_exp) ||
			on_first_change[69])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sJ :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sJ_expected_prev);
		$display ("     Real value = %b", sJ_prev);
		nummismatches = nummismatches + 1;
		on_first_change[69] = 1'b0;
		last_sJ_exp = sJ_expected_prev;
	end
	if (
		( sJN_expected_prev !== 1'bx ) && ( sJN_prev !== sJN_expected_prev )
		&& ((sJN_expected_prev !== last_sJN_exp) ||
			on_first_change[70])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sJN :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sJN_expected_prev);
		$display ("     Real value = %b", sJN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[70] = 1'b0;
		last_sJN_exp = sJN_expected_prev;
	end
	if (
		( sJZ_expected_prev !== 1'bx ) && ( sJZ_prev !== sJZ_expected_prev )
		&& ((sJZ_expected_prev !== last_sJZ_exp) ||
			on_first_change[71])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sJZ :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sJZ_expected_prev);
		$display ("     Real value = %b", sJZ_prev);
		nummismatches = nummismatches + 1;
		on_first_change[71] = 1'b0;
		last_sJZ_exp = sJZ_expected_prev;
	end
	if (
		( sLDA_expected_prev !== 1'bx ) && ( sLDA_prev !== sLDA_expected_prev )
		&& ((sLDA_expected_prev !== last_sLDA_exp) ||
			on_first_change[72])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sLDA :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sLDA_expected_prev);
		$display ("     Real value = %b", sLDA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[72] = 1'b0;
		last_sLDA_exp = sLDA_expected_prev;
	end
	if (
		( sNOP_expected_prev !== 1'bx ) && ( sNOP_prev !== sNOP_expected_prev )
		&& ((sNOP_expected_prev !== last_sNOP_exp) ||
			on_first_change[74])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sNOP :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sNOP_expected_prev);
		$display ("     Real value = %b", sNOP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[74] = 1'b0;
		last_sNOP_exp = sNOP_expected_prev;
	end
	if (
		( sNOT_expected_prev !== 1'bx ) && ( sNOT_prev !== sNOT_expected_prev )
		&& ((sNOT_expected_prev !== last_sNOT_exp) ||
			on_first_change[75])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sNOT :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sNOT_expected_prev);
		$display ("     Real value = %b", sNOT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[75] = 1'b0;
		last_sNOT_exp = sNOT_expected_prev;
	end
	if (
		( sOR_expected_prev !== 1'bx ) && ( sOR_prev !== sOR_expected_prev )
		&& ((sOR_expected_prev !== last_sOR_exp) ||
			on_first_change[76])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sOR :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sOR_expected_prev);
		$display ("     Real value = %b", sOR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[76] = 1'b0;
		last_sOR_exp = sOR_expected_prev;
	end
	if (
		( sOUT_expected_prev !== 1'bx ) && ( sOUT_prev !== sOUT_expected_prev )
		&& ((sOUT_expected_prev !== last_sOUT_exp) ||
			on_first_change[77])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sOUT :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sOUT_expected_prev);
		$display ("     Real value = %b", sOUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[77] = 1'b0;
		last_sOUT_exp = sOUT_expected_prev;
	end
	if (
		( sSHL_expected_prev !== 1'bx ) && ( sSHL_prev !== sSHL_expected_prev )
		&& ((sSHL_expected_prev !== last_sSHL_exp) ||
			on_first_change[78])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sSHL :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sSHL_expected_prev);
		$display ("     Real value = %b", sSHL_prev);
		nummismatches = nummismatches + 1;
		on_first_change[78] = 1'b0;
		last_sSHL_exp = sSHL_expected_prev;
	end
	if (
		( sSHR_expected_prev !== 1'bx ) && ( sSHR_prev !== sSHR_expected_prev )
		&& ((sSHR_expected_prev !== last_sSHR_exp) ||
			on_first_change[79])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sSHR :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sSHR_expected_prev);
		$display ("     Real value = %b", sSHR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[79] = 1'b0;
		last_sSHR_exp = sSHR_expected_prev;
	end
	if (
		( sSOP_expected_prev !== 1'bx ) && ( sSOP_prev !== sSOP_expected_prev )
		&& ((sSOP_expected_prev !== last_sSOP_exp) ||
			on_first_change[80])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sSOP :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sSOP_expected_prev);
		$display ("     Real value = %b", sSOP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[80] = 1'b0;
		last_sSOP_exp = sSOP_expected_prev;
	end
	if (
		( sSTA_expected_prev !== 1'bx ) && ( sSTA_prev !== sSTA_expected_prev )
		&& ((sSTA_expected_prev !== last_sSTA_exp) ||
			on_first_change[81])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sSTA :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sSTA_expected_prev);
		$display ("     Real value = %b", sSTA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[81] = 1'b0;
		last_sSTA_exp = sSTA_expected_prev;
	end
	if (
		( sSUB_expected_prev !== 1'bx ) && ( sSUB_prev !== sSUB_expected_prev )
		&& ((sSUB_expected_prev !== last_sSUB_exp) ||
			on_first_change[82])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sSUB :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sSUB_expected_prev);
		$display ("     Real value = %b", sSUB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[82] = 1'b0;
		last_sSUB_exp = sSUB_expected_prev;
	end
	if (
		( saida_expected_prev[0] !== 1'bx ) && ( saida_prev[0] !== saida_expected_prev[0] )
		&& ((saida_expected_prev[0] !== last_saida_exp[0]) ||
			on_first_change[83])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_expected_prev);
		$display ("     Real value = %b", saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[83] = 1'b0;
		last_saida_exp[0] = saida_expected_prev[0];
	end
	if (
		( saida_expected_prev[1] !== 1'bx ) && ( saida_prev[1] !== saida_expected_prev[1] )
		&& ((saida_expected_prev[1] !== last_saida_exp[1]) ||
			on_first_change[83])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_expected_prev);
		$display ("     Real value = %b", saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[83] = 1'b0;
		last_saida_exp[1] = saida_expected_prev[1];
	end
	if (
		( saida_expected_prev[2] !== 1'bx ) && ( saida_prev[2] !== saida_expected_prev[2] )
		&& ((saida_expected_prev[2] !== last_saida_exp[2]) ||
			on_first_change[83])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_expected_prev);
		$display ("     Real value = %b", saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[83] = 1'b0;
		last_saida_exp[2] = saida_expected_prev[2];
	end
	if (
		( saida_expected_prev[3] !== 1'bx ) && ( saida_prev[3] !== saida_expected_prev[3] )
		&& ((saida_expected_prev[3] !== last_saida_exp[3]) ||
			on_first_change[83])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_expected_prev);
		$display ("     Real value = %b", saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[83] = 1'b0;
		last_saida_exp[3] = saida_expected_prev[3];
	end
	if (
		( saida_expected_prev[4] !== 1'bx ) && ( saida_prev[4] !== saida_expected_prev[4] )
		&& ((saida_expected_prev[4] !== last_saida_exp[4]) ||
			on_first_change[83])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_expected_prev);
		$display ("     Real value = %b", saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[83] = 1'b0;
		last_saida_exp[4] = saida_expected_prev[4];
	end
	if (
		( saida_expected_prev[5] !== 1'bx ) && ( saida_prev[5] !== saida_expected_prev[5] )
		&& ((saida_expected_prev[5] !== last_saida_exp[5]) ||
			on_first_change[83])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_expected_prev);
		$display ("     Real value = %b", saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[83] = 1'b0;
		last_saida_exp[5] = saida_expected_prev[5];
	end
	if (
		( saida_expected_prev[6] !== 1'bx ) && ( saida_prev[6] !== saida_expected_prev[6] )
		&& ((saida_expected_prev[6] !== last_saida_exp[6]) ||
			on_first_change[83])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_expected_prev);
		$display ("     Real value = %b", saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[83] = 1'b0;
		last_saida_exp[6] = saida_expected_prev[6];
	end
	if (
		( saida_expected_prev[7] !== 1'bx ) && ( saida_prev[7] !== saida_expected_prev[7] )
		&& ((saida_expected_prev[7] !== last_saida_exp[7]) ||
			on_first_change[83])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_expected_prev);
		$display ("     Real value = %b", saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[83] = 1'b0;
		last_saida_exp[7] = saida_expected_prev[7];
	end
	if (
		( saida_expected_prev[8] !== 1'bx ) && ( saida_prev[8] !== saida_expected_prev[8] )
		&& ((saida_expected_prev[8] !== last_saida_exp[8]) ||
			on_first_change[83])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_expected_prev);
		$display ("     Real value = %b", saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[83] = 1'b0;
		last_saida_exp[8] = saida_expected_prev[8];
	end
	if (
		( saida_expected_prev[9] !== 1'bx ) && ( saida_prev[9] !== saida_expected_prev[9] )
		&& ((saida_expected_prev[9] !== last_saida_exp[9]) ||
			on_first_change[83])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_expected_prev);
		$display ("     Real value = %b", saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[83] = 1'b0;
		last_saida_exp[9] = saida_expected_prev[9];
	end
	if (
		( saida_expected_prev[10] !== 1'bx ) && ( saida_prev[10] !== saida_expected_prev[10] )
		&& ((saida_expected_prev[10] !== last_saida_exp[10]) ||
			on_first_change[83])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_expected_prev);
		$display ("     Real value = %b", saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[83] = 1'b0;
		last_saida_exp[10] = saida_expected_prev[10];
	end
	if (
		( saida_expected_prev[11] !== 1'bx ) && ( saida_prev[11] !== saida_expected_prev[11] )
		&& ((saida_expected_prev[11] !== last_saida_exp[11]) ||
			on_first_change[83])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_expected_prev);
		$display ("     Real value = %b", saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[83] = 1'b0;
		last_saida_exp[11] = saida_expected_prev[11];
	end
	if (
		( saida_expected_prev[12] !== 1'bx ) && ( saida_prev[12] !== saida_expected_prev[12] )
		&& ((saida_expected_prev[12] !== last_saida_exp[12]) ||
			on_first_change[83])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_expected_prev);
		$display ("     Real value = %b", saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[83] = 1'b0;
		last_saida_exp[12] = saida_expected_prev[12];
	end
	if (
		( saida_expected_prev[13] !== 1'bx ) && ( saida_prev[13] !== saida_expected_prev[13] )
		&& ((saida_expected_prev[13] !== last_saida_exp[13]) ||
			on_first_change[83])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_expected_prev);
		$display ("     Real value = %b", saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[83] = 1'b0;
		last_saida_exp[13] = saida_expected_prev[13];
	end
	if (
		( saida_expected_prev[14] !== 1'bx ) && ( saida_prev[14] !== saida_expected_prev[14] )
		&& ((saida_expected_prev[14] !== last_saida_exp[14]) ||
			on_first_change[83])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_expected_prev);
		$display ("     Real value = %b", saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[83] = 1'b0;
		last_saida_exp[14] = saida_expected_prev[14];
	end
	if (
		( saida_expected_prev[15] !== 1'bx ) && ( saida_prev[15] !== saida_expected_prev[15] )
		&& ((saida_expected_prev[15] !== last_saida_exp[15]) ||
			on_first_change[83])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_expected_prev);
		$display ("     Real value = %b", saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[83] = 1'b0;
		last_saida_exp[15] = saida_expected_prev[15];
	end
	if (
		( selectRDM_expected_prev[0] !== 1'bx ) && ( selectRDM_prev[0] !== selectRDM_expected_prev[0] )
		&& ((selectRDM_expected_prev[0] !== last_selectRDM_exp[0]) ||
			on_first_change[84])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port selectRDM[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", selectRDM_expected_prev);
		$display ("     Real value = %b", selectRDM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[84] = 1'b0;
		last_selectRDM_exp[0] = selectRDM_expected_prev[0];
	end
	if (
		( selectRDM_expected_prev[1] !== 1'bx ) && ( selectRDM_prev[1] !== selectRDM_expected_prev[1] )
		&& ((selectRDM_expected_prev[1] !== last_selectRDM_exp[1]) ||
			on_first_change[84])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port selectRDM[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", selectRDM_expected_prev);
		$display ("     Real value = %b", selectRDM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[84] = 1'b0;
		last_selectRDM_exp[1] = selectRDM_expected_prev[1];
	end
	if (
		( selectREM_expected_prev !== 1'bx ) && ( selectREM_prev !== selectREM_expected_prev )
		&& ((selectREM_expected_prev !== last_selectREM_exp) ||
			on_first_change[85])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port selectREM :: @time = %t",  $realtime);
		$display ("     Expected value = %b", selectREM_expected_prev);
		$display ("     Real value = %b", selectREM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[85] = 1'b0;
		last_selectREM_exp = selectREM_expected_prev;
	end
	if (
		( writeAC_expected_prev !== 1'bx ) && ( writeAC_prev !== writeAC_expected_prev )
		&& ((writeAC_expected_prev !== last_writeAC_exp) ||
			on_first_change[86])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port writeAC :: @time = %t",  $realtime);
		$display ("     Expected value = %b", writeAC_expected_prev);
		$display ("     Real value = %b", writeAC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[86] = 1'b0;
		last_writeAC_exp = writeAC_expected_prev;
	end
	if (
		( writeMEM_expected_prev !== 1'bx ) && ( writeMEM_prev !== writeMEM_expected_prev )
		&& ((writeMEM_expected_prev !== last_writeMEM_exp) ||
			on_first_change[87])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port writeMEM :: @time = %t",  $realtime);
		$display ("     Expected value = %b", writeMEM_expected_prev);
		$display ("     Real value = %b", writeMEM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[87] = 1'b0;
		last_writeMEM_exp = writeMEM_expected_prev;
	end
	if (
		( writeN_expected_prev !== 1'bx ) && ( writeN_prev !== writeN_expected_prev )
		&& ((writeN_expected_prev !== last_writeN_exp) ||
			on_first_change[88])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port writeN :: @time = %t",  $realtime);
		$display ("     Expected value = %b", writeN_expected_prev);
		$display ("     Real value = %b", writeN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[88] = 1'b0;
		last_writeN_exp = writeN_expected_prev;
	end
	if (
		( writeOUT_expected_prev !== 1'bx ) && ( writeOUT_prev !== writeOUT_expected_prev )
		&& ((writeOUT_expected_prev !== last_writeOUT_exp) ||
			on_first_change[89])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port writeOUT :: @time = %t",  $realtime);
		$display ("     Expected value = %b", writeOUT_expected_prev);
		$display ("     Real value = %b", writeOUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[89] = 1'b0;
		last_writeOUT_exp = writeOUT_expected_prev;
	end
	if (
		( writeRDM_expected_prev !== 1'bx ) && ( writeRDM_prev !== writeRDM_expected_prev )
		&& ((writeRDM_expected_prev !== last_writeRDM_exp) ||
			on_first_change[90])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port writeRDM :: @time = %t",  $realtime);
		$display ("     Expected value = %b", writeRDM_expected_prev);
		$display ("     Real value = %b", writeRDM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[90] = 1'b0;
		last_writeRDM_exp = writeRDM_expected_prev;
	end
	if (
		( writeREM_expected_prev !== 1'bx ) && ( writeREM_prev !== writeREM_expected_prev )
		&& ((writeREM_expected_prev !== last_writeREM_exp) ||
			on_first_change[91])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port writeREM :: @time = %t",  $realtime);
		$display ("     Expected value = %b", writeREM_expected_prev);
		$display ("     Real value = %b", writeREM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[91] = 1'b0;
		last_writeREM_exp = writeREM_expected_prev;
	end
	if (
		( writeRI_expected_prev !== 1'bx ) && ( writeRI_prev !== writeRI_expected_prev )
		&& ((writeRI_expected_prev !== last_writeRI_exp) ||
			on_first_change[92])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port writeRI :: @time = %t",  $realtime);
		$display ("     Expected value = %b", writeRI_expected_prev);
		$display ("     Real value = %b", writeRI_prev);
		nummismatches = nummismatches + 1;
		on_first_change[92] = 1'b0;
		last_writeRI_exp = writeRI_expected_prev;
	end
	if (
		( writeZ_expected_prev !== 1'bx ) && ( writeZ_prev !== writeZ_expected_prev )
		&& ((writeZ_expected_prev !== last_writeZ_exp) ||
			on_first_change[93])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port writeZ :: @time = %t",  $realtime);
		$display ("     Expected value = %b", writeZ_expected_prev);
		$display ("     Real value = %b", writeZ_prev);
		nummismatches = nummismatches + 1;
		on_first_change[93] = 1'b0;
		last_writeZ_exp = writeZ_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#40000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module CPU_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg clkBCD;
reg [15:0] entrada;
// wires                                               
wire T0;
wire T1;
wire T2;
wire T3;
wire T4;
wire T5;
wire T6;
wire T7;
wire T8;
wire T9;
wire a0;
wire a1;
wire a2;
wire a3;
wire a4;
wire a5;
wire [15:0] acumulador;
wire b0;
wire b1;
wire b2;
wire b3;
wire b4;
wire b5;
wire [19:0] bcd;
wire c0;
wire c1;
wire c2;
wire c3;
wire c4;
wire c5;
wire d0;
wire d1;
wire d2;
wire d3;
wire d4;
wire d5;
wire e0;
wire e1;
wire e2;
wire e3;
wire e4;
wire e5;
wire f0;
wire f1;
wire f2;
wire f3;
wire f4;
wire f5;
wire g0;
wire g1;
wire g2;
wire g3;
wire g4;
wire g5;
wire incrementPC;
wire [2:0] opULA;
wire [15:0] qMEM;
wire [15:0] qPC;
wire [15:0] qRDM;
wire [15:0] qREM;
wire [15:0] qRI;
wire sADD;
wire sAND;
wire sDIR;
wire sHLT;
wire sIM;
wire sIN;
wire sIND;
wire sJ;
wire sJN;
wire sJZ;
wire sLDA;
wire sN;
wire sNOP;
wire sNOT;
wire sOR;
wire sOUT;
wire sSHL;
wire sSHR;
wire sSOP;
wire sSTA;
wire sSUB;
wire [15:0] saida;
wire [1:0] selectRDM;
wire selectREM;
wire writeAC;
wire writeMEM;
wire writeN;
wire writeOUT;
wire writeRDM;
wire writeREM;
wire writeRI;
wire writeZ;

wire sampler;                             

// assign statements (if any)                          
CPU i1 (
// port map - connection between master ports and signals/registers   
	.T0(T0),
	.T1(T1),
	.T2(T2),
	.T3(T3),
	.T4(T4),
	.T5(T5),
	.T6(T6),
	.T7(T7),
	.T8(T8),
	.T9(T9),
	.a0(a0),
	.a1(a1),
	.a2(a2),
	.a3(a3),
	.a4(a4),
	.a5(a5),
	.acumulador(acumulador),
	.b0(b0),
	.b1(b1),
	.b2(b2),
	.b3(b3),
	.b4(b4),
	.b5(b5),
	.bcd(bcd),
	.c0(c0),
	.c1(c1),
	.c2(c2),
	.c3(c3),
	.c4(c4),
	.c5(c5),
	.clk(clk),
	.clkBCD(clkBCD),
	.d0(d0),
	.d1(d1),
	.d2(d2),
	.d3(d3),
	.d4(d4),
	.d5(d5),
	.e0(e0),
	.e1(e1),
	.e2(e2),
	.e3(e3),
	.e4(e4),
	.e5(e5),
	.entrada(entrada),
	.f0(f0),
	.f1(f1),
	.f2(f2),
	.f3(f3),
	.f4(f4),
	.f5(f5),
	.g0(g0),
	.g1(g1),
	.g2(g2),
	.g3(g3),
	.g4(g4),
	.g5(g5),
	.incrementPC(incrementPC),
	.opULA(opULA),
	.qMEM(qMEM),
	.qPC(qPC),
	.qRDM(qRDM),
	.qREM(qREM),
	.qRI(qRI),
	.sADD(sADD),
	.sAND(sAND),
	.sDIR(sDIR),
	.sHLT(sHLT),
	.sIM(sIM),
	.sIN(sIN),
	.sIND(sIND),
	.sJ(sJ),
	.sJN(sJN),
	.sJZ(sJZ),
	.sLDA(sLDA),
	.sN(sN),
	.sNOP(sNOP),
	.sNOT(sNOT),
	.sOR(sOR),
	.sOUT(sOUT),
	.sSHL(sSHL),
	.sSHR(sSHR),
	.sSOP(sSOP),
	.sSTA(sSTA),
	.sSUB(sSUB),
	.saida(saida),
	.selectRDM(selectRDM),
	.selectREM(selectREM),
	.writeAC(writeAC),
	.writeMEM(writeMEM),
	.writeN(writeN),
	.writeOUT(writeOUT),
	.writeRDM(writeRDM),
	.writeREM(writeREM),
	.writeRI(writeRI),
	.writeZ(writeZ)
);

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 

// clkBCD
initial
begin
	clkBCD = 1'b0;
end 
// entrada[ 15 ]
initial
begin
	entrada[15] = 1'b0;
end 
// entrada[ 14 ]
initial
begin
	entrada[14] = 1'b0;
end 
// entrada[ 13 ]
initial
begin
	entrada[13] = 1'b0;
end 
// entrada[ 12 ]
initial
begin
	entrada[12] = 1'b0;
end 
// entrada[ 11 ]
initial
begin
	entrada[11] = 1'b0;
end 
// entrada[ 10 ]
initial
begin
	entrada[10] = 1'b0;
end 
// entrada[ 9 ]
initial
begin
	entrada[9] = 1'b0;
end 
// entrada[ 8 ]
initial
begin
	entrada[8] = 1'b0;
end 
// entrada[ 7 ]
initial
begin
	entrada[7] = 1'b0;
end 
// entrada[ 6 ]
initial
begin
	entrada[6] = 1'b0;
end 
// entrada[ 5 ]
initial
begin
	entrada[5] = 1'b0;
end 
// entrada[ 4 ]
initial
begin
	entrada[4] = 1'b1;
	entrada[4] = #13999000 1'b0;
end 
// entrada[ 3 ]
initial
begin
	entrada[3] = 1'b0;
end 
// entrada[ 2 ]
initial
begin
	entrada[2] = 1'b1;
	entrada[2] = #13999000 1'b0;
end 
// entrada[ 1 ]
initial
begin
	entrada[1] = 1'b0;
end 
// entrada[ 0 ]
initial
begin
	entrada[0] = 1'b0;
end 

CPU_vlg_sample_tst tb_sample (
	.clk(clk),
	.clkBCD(clkBCD),
	.entrada(entrada),
	.sampler_tx(sampler)
);

CPU_vlg_check_tst tb_out(
	.T0(T0),
	.T1(T1),
	.T2(T2),
	.T3(T3),
	.T4(T4),
	.T5(T5),
	.T6(T6),
	.T7(T7),
	.T8(T8),
	.T9(T9),
	.a0(a0),
	.a1(a1),
	.a2(a2),
	.a3(a3),
	.a4(a4),
	.a5(a5),
	.acumulador(acumulador),
	.b0(b0),
	.b1(b1),
	.b2(b2),
	.b3(b3),
	.b4(b4),
	.b5(b5),
	.bcd(bcd),
	.c0(c0),
	.c1(c1),
	.c2(c2),
	.c3(c3),
	.c4(c4),
	.c5(c5),
	.d0(d0),
	.d1(d1),
	.d2(d2),
	.d3(d3),
	.d4(d4),
	.d5(d5),
	.e0(e0),
	.e1(e1),
	.e2(e2),
	.e3(e3),
	.e4(e4),
	.e5(e5),
	.f0(f0),
	.f1(f1),
	.f2(f2),
	.f3(f3),
	.f4(f4),
	.f5(f5),
	.g0(g0),
	.g1(g1),
	.g2(g2),
	.g3(g3),
	.g4(g4),
	.g5(g5),
	.incrementPC(incrementPC),
	.opULA(opULA),
	.qMEM(qMEM),
	.qPC(qPC),
	.qRDM(qRDM),
	.qREM(qREM),
	.qRI(qRI),
	.sADD(sADD),
	.sAND(sAND),
	.sDIR(sDIR),
	.sHLT(sHLT),
	.sIM(sIM),
	.sIN(sIN),
	.sIND(sIND),
	.sJ(sJ),
	.sJN(sJN),
	.sJZ(sJZ),
	.sLDA(sLDA),
	.sN(sN),
	.sNOP(sNOP),
	.sNOT(sNOT),
	.sOR(sOR),
	.sOUT(sOUT),
	.sSHL(sSHL),
	.sSHR(sSHR),
	.sSOP(sSOP),
	.sSTA(sSTA),
	.sSUB(sSUB),
	.saida(saida),
	.selectRDM(selectRDM),
	.selectREM(selectREM),
	.writeAC(writeAC),
	.writeMEM(writeMEM),
	.writeN(writeN),
	.writeOUT(writeOUT),
	.writeRDM(writeRDM),
	.writeREM(writeREM),
	.writeRI(writeRI),
	.writeZ(writeZ),
	.sampler_rx(sampler)
);
endmodule

