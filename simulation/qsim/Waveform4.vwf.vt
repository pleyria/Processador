// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/17/2020 18:04:42"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    DecodificadorInstrucoes
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module DecodificadorInstrucoes_vlg_sample_tst(
	instrucao,
	sampler_tx
);
input [15:0] instrucao;
output sampler_tx;

reg sample;
time current_time;
always @(instrucao)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
    if ($realtime == 0 || $realtime != current_time)  
    begin                                             
        if (sample === 1'bx)                          
            sample = 0;                               
        else                                          
            sample = ~sample;                         
    end                                               
    current_time = $realtime;                         
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module DecodificadorInstrucoes_vlg_check_tst (
	ADD,
	AND,
	DIR,
	HLT,
	IM,
	IN,
	IND,
	J,
	JN,
	JZ,
	LDA,
	NOP,
	NOT,
	OR,
	OUT,
	SHL,
	SHR,
	SOP,
	STA,
	SUB,
	sampler_rx
);
input  ADD;
input  AND;
input  DIR;
input  HLT;
input  IM;
input  IN;
input  IND;
input  J;
input  JN;
input  JZ;
input  LDA;
input  NOP;
input  NOT;
input  OR;
input  OUT;
input  SHL;
input  SHR;
input  SOP;
input  STA;
input  SUB;
input sampler_rx;

reg  ADD_expected;
reg  AND_expected;
reg  DIR_expected;
reg  HLT_expected;
reg  IM_expected;
reg  IN_expected;
reg  IND_expected;
reg  J_expected;
reg  JN_expected;
reg  JZ_expected;
reg  LDA_expected;
reg  NOP_expected;
reg  NOT_expected;
reg  OR_expected;
reg  OUT_expected;
reg  SHL_expected;
reg  SHR_expected;
reg  SOP_expected;
reg  STA_expected;
reg  SUB_expected;

reg  ADD_prev;
reg  AND_prev;
reg  DIR_prev;
reg  HLT_prev;
reg  IM_prev;
reg  IN_prev;
reg  IND_prev;
reg  J_prev;
reg  JN_prev;
reg  JZ_prev;
reg  LDA_prev;
reg  NOP_prev;
reg  NOT_prev;
reg  OR_prev;
reg  OUT_prev;
reg  SHL_prev;
reg  SHR_prev;
reg  SOP_prev;
reg  STA_prev;
reg  SUB_prev;

reg  ADD_expected_prev;
reg  AND_expected_prev;
reg  DIR_expected_prev;
reg  HLT_expected_prev;
reg  IM_expected_prev;
reg  IN_expected_prev;
reg  IND_expected_prev;
reg  J_expected_prev;
reg  JN_expected_prev;
reg  JZ_expected_prev;
reg  LDA_expected_prev;
reg  NOP_expected_prev;
reg  NOT_expected_prev;
reg  OR_expected_prev;
reg  OUT_expected_prev;
reg  SHL_expected_prev;
reg  SHR_expected_prev;
reg  SOP_expected_prev;
reg  STA_expected_prev;
reg  SUB_expected_prev;

reg  last_ADD_exp;
reg  last_AND_exp;
reg  last_DIR_exp;
reg  last_HLT_exp;
reg  last_IM_exp;
reg  last_IN_exp;
reg  last_IND_exp;
reg  last_J_exp;
reg  last_JN_exp;
reg  last_JZ_exp;
reg  last_LDA_exp;
reg  last_NOP_exp;
reg  last_NOT_exp;
reg  last_OR_exp;
reg  last_OUT_exp;
reg  last_SHL_exp;
reg  last_SHR_exp;
reg  last_SOP_exp;
reg  last_STA_exp;
reg  last_SUB_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:20] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 20'b1;
end

// update real /o prevs

always @(trigger)
begin
	ADD_prev = ADD;
	AND_prev = AND;
	DIR_prev = DIR;
	HLT_prev = HLT;
	IM_prev = IM;
	IN_prev = IN;
	IND_prev = IND;
	J_prev = J;
	JN_prev = JN;
	JZ_prev = JZ;
	LDA_prev = LDA;
	NOP_prev = NOP;
	NOT_prev = NOT;
	OR_prev = OR;
	OUT_prev = OUT;
	SHL_prev = SHL;
	SHR_prev = SHR;
	SOP_prev = SOP;
	STA_prev = STA;
	SUB_prev = SUB;
end

// update expected /o prevs

always @(trigger)
begin
	ADD_expected_prev = ADD_expected;
	AND_expected_prev = AND_expected;
	DIR_expected_prev = DIR_expected;
	HLT_expected_prev = HLT_expected;
	IM_expected_prev = IM_expected;
	IN_expected_prev = IN_expected;
	IND_expected_prev = IND_expected;
	J_expected_prev = J_expected;
	JN_expected_prev = JN_expected;
	JZ_expected_prev = JZ_expected;
	LDA_expected_prev = LDA_expected;
	NOP_expected_prev = NOP_expected;
	NOT_expected_prev = NOT_expected;
	OR_expected_prev = OR_expected;
	OUT_expected_prev = OUT_expected;
	SHL_expected_prev = SHL_expected;
	SHR_expected_prev = SHR_expected;
	SOP_expected_prev = SOP_expected;
	STA_expected_prev = STA_expected;
	SUB_expected_prev = SUB_expected;
end



// expected ADD
initial
begin
	ADD_expected = 1'bX;
end 

// expected AND
initial
begin
	AND_expected = 1'bX;
end 

// expected DIR
initial
begin
	DIR_expected = 1'bX;
end 

// expected HLT
initial
begin
	HLT_expected = 1'bX;
end 

// expected IM
initial
begin
	IM_expected = 1'bX;
end 

// expected IN
initial
begin
	IN_expected = 1'bX;
end 

// expected IND
initial
begin
	IND_expected = 1'bX;
end 

// expected J
initial
begin
	J_expected = 1'bX;
end 

// expected JN
initial
begin
	JN_expected = 1'bX;
end 

// expected JZ
initial
begin
	JZ_expected = 1'bX;
end 

// expected LDA
initial
begin
	LDA_expected = 1'bX;
end 

// expected NOP
initial
begin
	NOP_expected = 1'bX;
end 

// expected NOT
initial
begin
	NOT_expected = 1'bX;
end 

// expected OR
initial
begin
	OR_expected = 1'bX;
end 

// expected OUT
initial
begin
	OUT_expected = 1'bX;
end 

// expected SHL
initial
begin
	SHL_expected = 1'bX;
end 

// expected SHR
initial
begin
	SHR_expected = 1'bX;
end 

// expected SOP
initial
begin
	SOP_expected = 1'bX;
end 

// expected STA
initial
begin
	STA_expected = 1'bX;
end 

// expected SUB
initial
begin
	SUB_expected = 1'bX;
end 
// generate trigger
always @(ADD_expected or ADD or AND_expected or AND or DIR_expected or DIR or HLT_expected or HLT or IM_expected or IM or IN_expected or IN or IND_expected or IND or J_expected or J or JN_expected or JN or JZ_expected or JZ or LDA_expected or LDA or NOP_expected or NOP or NOT_expected or NOT or OR_expected or OR or OUT_expected or OUT or SHL_expected or SHL or SHR_expected or SHR or SOP_expected or SOP or STA_expected or STA or SUB_expected or SUB)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected ADD = %b | expected AND = %b | expected DIR = %b | expected HLT = %b | expected IM = %b | expected IN = %b | expected IND = %b | expected J = %b | expected JN = %b | expected JZ = %b | expected LDA = %b | expected NOP = %b | expected NOT = %b | expected OR = %b | expected OUT = %b | expected SHL = %b | expected SHR = %b | expected SOP = %b | expected STA = %b | expected SUB = %b | ",ADD_expected_prev,AND_expected_prev,DIR_expected_prev,HLT_expected_prev,IM_expected_prev,IN_expected_prev,IND_expected_prev,J_expected_prev,JN_expected_prev,JZ_expected_prev,LDA_expected_prev,NOP_expected_prev,NOT_expected_prev,OR_expected_prev,OUT_expected_prev,SHL_expected_prev,SHR_expected_prev,SOP_expected_prev,STA_expected_prev,SUB_expected_prev);
	$display("| real ADD = %b | real AND = %b | real DIR = %b | real HLT = %b | real IM = %b | real IN = %b | real IND = %b | real J = %b | real JN = %b | real JZ = %b | real LDA = %b | real NOP = %b | real NOT = %b | real OR = %b | real OUT = %b | real SHL = %b | real SHR = %b | real SOP = %b | real STA = %b | real SUB = %b | ",ADD_prev,AND_prev,DIR_prev,HLT_prev,IM_prev,IN_prev,IND_prev,J_prev,JN_prev,JZ_prev,LDA_prev,NOP_prev,NOT_prev,OR_prev,OUT_prev,SHL_prev,SHR_prev,SOP_prev,STA_prev,SUB_prev);
`endif
	if (
		( ADD_expected_prev !== 1'bx ) && ( ADD_prev !== ADD_expected_prev )
		&& ((ADD_expected_prev !== last_ADD_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ADD :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ADD_expected_prev);
		$display ("     Real value = %b", ADD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ADD_exp = ADD_expected_prev;
	end
	if (
		( AND_expected_prev !== 1'bx ) && ( AND_prev !== AND_expected_prev )
		&& ((AND_expected_prev !== last_AND_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AND :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AND_expected_prev);
		$display ("     Real value = %b", AND_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_AND_exp = AND_expected_prev;
	end
	if (
		( DIR_expected_prev !== 1'bx ) && ( DIR_prev !== DIR_expected_prev )
		&& ((DIR_expected_prev !== last_DIR_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DIR :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DIR_expected_prev);
		$display ("     Real value = %b", DIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_DIR_exp = DIR_expected_prev;
	end
	if (
		( HLT_expected_prev !== 1'bx ) && ( HLT_prev !== HLT_expected_prev )
		&& ((HLT_expected_prev !== last_HLT_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HLT :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HLT_expected_prev);
		$display ("     Real value = %b", HLT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_HLT_exp = HLT_expected_prev;
	end
	if (
		( IM_expected_prev !== 1'bx ) && ( IM_prev !== IM_expected_prev )
		&& ((IM_expected_prev !== last_IM_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IM :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IM_expected_prev);
		$display ("     Real value = %b", IM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_IM_exp = IM_expected_prev;
	end
	if (
		( IN_expected_prev !== 1'bx ) && ( IN_prev !== IN_expected_prev )
		&& ((IN_expected_prev !== last_IN_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IN :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IN_expected_prev);
		$display ("     Real value = %b", IN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_IN_exp = IN_expected_prev;
	end
	if (
		( IND_expected_prev !== 1'bx ) && ( IND_prev !== IND_expected_prev )
		&& ((IND_expected_prev !== last_IND_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IND :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IND_expected_prev);
		$display ("     Real value = %b", IND_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_IND_exp = IND_expected_prev;
	end
	if (
		( J_expected_prev !== 1'bx ) && ( J_prev !== J_expected_prev )
		&& ((J_expected_prev !== last_J_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port J :: @time = %t",  $realtime);
		$display ("     Expected value = %b", J_expected_prev);
		$display ("     Real value = %b", J_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_J_exp = J_expected_prev;
	end
	if (
		( JN_expected_prev !== 1'bx ) && ( JN_prev !== JN_expected_prev )
		&& ((JN_expected_prev !== last_JN_exp) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port JN :: @time = %t",  $realtime);
		$display ("     Expected value = %b", JN_expected_prev);
		$display ("     Real value = %b", JN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_JN_exp = JN_expected_prev;
	end
	if (
		( JZ_expected_prev !== 1'bx ) && ( JZ_prev !== JZ_expected_prev )
		&& ((JZ_expected_prev !== last_JZ_exp) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port JZ :: @time = %t",  $realtime);
		$display ("     Expected value = %b", JZ_expected_prev);
		$display ("     Real value = %b", JZ_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_JZ_exp = JZ_expected_prev;
	end
	if (
		( LDA_expected_prev !== 1'bx ) && ( LDA_prev !== LDA_expected_prev )
		&& ((LDA_expected_prev !== last_LDA_exp) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LDA :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LDA_expected_prev);
		$display ("     Real value = %b", LDA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_LDA_exp = LDA_expected_prev;
	end
	if (
		( NOP_expected_prev !== 1'bx ) && ( NOP_prev !== NOP_expected_prev )
		&& ((NOP_expected_prev !== last_NOP_exp) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port NOP :: @time = %t",  $realtime);
		$display ("     Expected value = %b", NOP_expected_prev);
		$display ("     Real value = %b", NOP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_NOP_exp = NOP_expected_prev;
	end
	if (
		( NOT_expected_prev !== 1'bx ) && ( NOT_prev !== NOT_expected_prev )
		&& ((NOT_expected_prev !== last_NOT_exp) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port NOT :: @time = %t",  $realtime);
		$display ("     Expected value = %b", NOT_expected_prev);
		$display ("     Real value = %b", NOT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_NOT_exp = NOT_expected_prev;
	end
	if (
		( OR_expected_prev !== 1'bx ) && ( OR_prev !== OR_expected_prev )
		&& ((OR_expected_prev !== last_OR_exp) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OR :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OR_expected_prev);
		$display ("     Real value = %b", OR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_OR_exp = OR_expected_prev;
	end
	if (
		( OUT_expected_prev !== 1'bx ) && ( OUT_prev !== OUT_expected_prev )
		&& ((OUT_expected_prev !== last_OUT_exp) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_expected_prev);
		$display ("     Real value = %b", OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_OUT_exp = OUT_expected_prev;
	end
	if (
		( SHL_expected_prev !== 1'bx ) && ( SHL_prev !== SHL_expected_prev )
		&& ((SHL_expected_prev !== last_SHL_exp) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SHL :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SHL_expected_prev);
		$display ("     Real value = %b", SHL_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_SHL_exp = SHL_expected_prev;
	end
	if (
		( SHR_expected_prev !== 1'bx ) && ( SHR_prev !== SHR_expected_prev )
		&& ((SHR_expected_prev !== last_SHR_exp) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SHR :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SHR_expected_prev);
		$display ("     Real value = %b", SHR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_SHR_exp = SHR_expected_prev;
	end
	if (
		( SOP_expected_prev !== 1'bx ) && ( SOP_prev !== SOP_expected_prev )
		&& ((SOP_expected_prev !== last_SOP_exp) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SOP :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SOP_expected_prev);
		$display ("     Real value = %b", SOP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_SOP_exp = SOP_expected_prev;
	end
	if (
		( STA_expected_prev !== 1'bx ) && ( STA_prev !== STA_expected_prev )
		&& ((STA_expected_prev !== last_STA_exp) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port STA :: @time = %t",  $realtime);
		$display ("     Expected value = %b", STA_expected_prev);
		$display ("     Real value = %b", STA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_STA_exp = STA_expected_prev;
	end
	if (
		( SUB_expected_prev !== 1'bx ) && ( SUB_prev !== SUB_expected_prev )
		&& ((SUB_expected_prev !== last_SUB_exp) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SUB :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SUB_expected_prev);
		$display ("     Real value = %b", SUB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_SUB_exp = SUB_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module DecodificadorInstrucoes_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [15:0] instrucao;
// wires                                               
wire ADD;
wire AND;
wire DIR;
wire HLT;
wire IM;
wire IN;
wire IND;
wire J;
wire JN;
wire JZ;
wire LDA;
wire NOP;
wire NOT;
wire OR;
wire OUT;
wire SHL;
wire SHR;
wire SOP;
wire STA;
wire SUB;

wire sampler;                             

// assign statements (if any)                          
DecodificadorInstrucoes i1 (
// port map - connection between master ports and signals/registers   
	.ADD(ADD),
	.\AND (AND),
	.DIR(DIR),
	.HLT(HLT),
	.IM(IM),
	.IN(IN),
	.IND(IND),
	.J(J),
	.JN(JN),
	.JZ(JZ),
	.LDA(LDA),
	.NOP(NOP),
	.\NOT (NOT),
	.\OR (OR),
	.OUT(OUT),
	.SHL(SHL),
	.SHR(SHR),
	.SOP(SOP),
	.STA(STA),
	.SUB(SUB),
	.instrucao(instrucao)
);
// instrucao[ 15 ]
initial
begin
	instrucao[15] = 1'b0;
end 
// instrucao[ 14 ]
initial
begin
	instrucao[14] = 1'b0;
end 
// instrucao[ 13 ]
initial
begin
	instrucao[13] = 1'b0;
end 
// instrucao[ 12 ]
initial
begin
	instrucao[12] = 1'b0;
end 
// instrucao[ 11 ]
initial
begin
	instrucao[11] = 1'b0;
end 
// instrucao[ 10 ]
initial
begin
	instrucao[10] = 1'b0;
end 
// instrucao[ 9 ]
initial
begin
	instrucao[9] = 1'b0;
end 
// instrucao[ 8 ]
initial
begin
	instrucao[8] = 1'b0;
end 
// instrucao[ 7 ]
initial
begin
	instrucao[7] = 1'b0;
end 
// instrucao[ 6 ]
initial
begin
	instrucao[6] = 1'b0;
	instrucao[6] = #630000 1'b1;
end 
// instrucao[ 5 ]
initial
begin
	instrucao[5] = 1'b0;
	instrucao[5] = #310000 1'b1;
	instrucao[5] = #320000 1'b0;
	instrucao[5] = #320000 1'b1;
end 
// instrucao[ 4 ]
initial
begin
	instrucao[4] = 1'b0;
	# 150000;
	repeat(2)
	begin
		instrucao[4] = 1'b1;
		instrucao[4] = #160000 1'b0;
		# 160000;
	end
	instrucao[4] = 1'b1;
	instrucao[4] = #160000 1'b0;
end 
// instrucao[ 3 ]
initial
begin
	instrucao[3] = 1'b0;
	# 70000;
	repeat(5)
	begin
		instrucao[3] = 1'b1;
		instrucao[3] = #80000 1'b0;
		# 80000;
	end
	instrucao[3] = 1'b1;
	instrucao[3] = #80000 1'b0;
end 
// instrucao[ 2 ]
initial
begin
	instrucao[2] = 1'b0;
	# 30000;
	repeat(12)
	begin
		instrucao[2] = 1'b1;
		instrucao[2] = #40000 1'b0;
		# 40000;
	end
	instrucao[2] = 1'b1;
end 
// instrucao[ 1 ]
initial
begin
	instrucao[1] = 1'b0;
	# 10000;
	repeat(24)
	begin
		instrucao[1] = 1'b1;
		instrucao[1] = #20000 1'b0;
		# 20000;
	end
	instrucao[1] = 1'b1;
	instrucao[1] = #20000 1'b0;
end 
// instrucao[ 0 ]
always
begin
	instrucao[0] = 1'b1;
	instrucao[0] = #10000 1'b0;
	#10000;
end 

DecodificadorInstrucoes_vlg_sample_tst tb_sample (
	.instrucao(instrucao),
	.sampler_tx(sampler)
);

DecodificadorInstrucoes_vlg_check_tst tb_out(
	.ADD(ADD),
	.AND(AND),
	.DIR(DIR),
	.HLT(HLT),
	.IM(IM),
	.IN(IN),
	.IND(IND),
	.J(J),
	.JN(JN),
	.JZ(JZ),
	.LDA(LDA),
	.NOP(NOP),
	.NOT(NOT),
	.OR(OR),
	.OUT(OUT),
	.SHL(SHL),
	.SHR(SHR),
	.SOP(SOP),
	.STA(STA),
	.SUB(SUB),
	.sampler_rx(sampler)
);
endmodule

