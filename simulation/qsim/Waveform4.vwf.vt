// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "01/24/2022 16:06:35"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          CPU_teste
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module CPU_teste_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk_kit;
reg enter;
// wires                                               
wire T0;
wire T1;
wire T2;
wire T3;
wire T4;
wire T5;
wire T6;
wire T7;
wire T8;
wire T9;
wire [15:0] addr_p;
wire [15:0] data_p;
wire [15:0] qMEM;
wire [15:0] qRDM;
wire [15:0] qREM;
wire trLDD;
wire tr_p;
wire waitTR;

// assign statements (if any)                          
CPU_teste i1 (
// port map - connection between master ports and signals/registers   
	.T0(T0),
	.T1(T1),
	.T2(T2),
	.T3(T3),
	.T4(T4),
	.T5(T5),
	.T6(T6),
	.T7(T7),
	.T8(T8),
	.T9(T9),
	.addr_p(addr_p),
	.clk_kit(clk_kit),
	.data_p(data_p),
	.enter(enter),
	.qMEM(qMEM),
	.qRDM(qRDM),
	.qREM(qREM),
	.trLDD(trLDD),
	.tr_p(tr_p),
	.waitTR(waitTR)
);
initial 
begin 
#1000000 $finish;
end 

// clk_kit
always
begin
	clk_kit = 1'b0;
	clk_kit = #10000 1'b1;
	#10000;
end 

// enter
initial
begin
	enter = 1'b0;
end 
endmodule

