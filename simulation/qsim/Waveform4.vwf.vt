// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/17/2020 19:41:57"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    DecodificadorInstrucoes
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module DecodificadorInstrucoes_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [15:0] instrucao;
// wires                                               
wire sADD;
wire sAND;
wire sDIR;
wire sHLT;
wire sIM;
wire sIN;
wire sIND;
wire sJ;
wire sJN;
wire sJZ;
wire sLDA;
wire sNOP;
wire sNOT;
wire sOR;
wire sOUT;
wire sSHL;
wire sSHR;
wire sSOP;
wire sSTA;
wire sSUB;

// assign statements (if any)                          
DecodificadorInstrucoes i1 (
// port map - connection between master ports and signals/registers   
	.instrucao(instrucao),
	.sADD(sADD),
	.sAND(sAND),
	.sDIR(sDIR),
	.sHLT(sHLT),
	.sIM(sIM),
	.sIN(sIN),
	.sIND(sIND),
	.sJ(sJ),
	.sJN(sJN),
	.sJZ(sJZ),
	.sLDA(sLDA),
	.sNOP(sNOP),
	.sNOT(sNOT),
	.sOR(sOR),
	.sOUT(sOUT),
	.sSHL(sSHL),
	.sSHR(sSHR),
	.sSOP(sSOP),
	.sSTA(sSTA),
	.sSUB(sSUB)
);
initial 
begin 
#1000000 $finish;
end 
// instrucao[ 15 ]
initial
begin
	instrucao[15] = 1'b0;
end 
// instrucao[ 14 ]
initial
begin
	instrucao[14] = 1'b0;
end 
// instrucao[ 13 ]
initial
begin
	instrucao[13] = 1'b0;
end 
// instrucao[ 12 ]
initial
begin
	instrucao[12] = 1'b0;
end 
// instrucao[ 11 ]
initial
begin
	instrucao[11] = 1'b0;
end 
// instrucao[ 10 ]
initial
begin
	instrucao[10] = 1'b0;
end 
// instrucao[ 9 ]
initial
begin
	instrucao[9] = 1'b0;
end 
// instrucao[ 8 ]
initial
begin
	instrucao[8] = 1'b0;
end 
// instrucao[ 7 ]
initial
begin
	instrucao[7] = 1'b0;
end 
// instrucao[ 6 ]
initial
begin
	instrucao[6] = 1'b0;
end 
// instrucao[ 5 ]
initial
begin
	instrucao[5] = 1'b0;
end 
// instrucao[ 4 ]
initial
begin
	instrucao[4] = 1'b0;
	instrucao[4] = #750000 1'b1;
end 
// instrucao[ 3 ]
initial
begin
	instrucao[3] = 1'b0;
	instrucao[3] = #350000 1'b1;
	instrucao[3] = #400000 1'b0;
end 
// instrucao[ 2 ]
initial
begin
	instrucao[2] = 1'b0;
	# 150000;
	repeat(2)
	begin
		instrucao[2] = 1'b1;
		instrucao[2] = #200000 1'b0;
		# 200000;
	end
	instrucao[2] = 1'b1;
end 
// instrucao[ 1 ]
initial
begin
	instrucao[1] = 1'b0;
	# 50000;
	repeat(4)
	begin
		instrucao[1] = 1'b1;
		instrucao[1] = #100000 1'b0;
		# 100000;
	end
	instrucao[1] = 1'b1;
	instrucao[1] = #100000 1'b0;
end 
// instrucao[ 0 ]
always
begin
	instrucao[0] = 1'b1;
	instrucao[0] = #50000 1'b0;
	#50000;
end 
initial 
begin 
#1000000 $finish;
end 
endmodule

