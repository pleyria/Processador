// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "01/24/2022 11:14:22"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          UnidadeControle
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module UnidadeControle_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg enter;
reg sADD;
reg sAND;
reg sDIR;
reg sHLT;
reg sIM;
reg sIN;
reg sIND;
reg sJ;
reg sJN;
reg sJZ;
reg sLDA;
reg sLDD;
reg sN;
reg sNOP;
reg sNOT;
reg sOR;
reg sOUT;
reg sSHL;
reg sSHR;
reg sSOP;
reg sSTA;
reg sSTD;
reg sSUB;
reg sZ;
reg waitTR;
// wires                                               
wire T0;
wire T1;
wire T2;
wire T3;
wire T4;
wire T5;
wire T6;
wire T7;
wire T8;
wire T9;
wire incrementPC;
wire [2:0] opULA;
wire read;
wire [1:0] selectRDM;
wire selectREM;
wire trLDD;
wire trSTD;
wire writeAC;
wire writeMEM;
wire writeN;
wire writeOUT;
wire writePC;
wire writeRDM;
wire writeREM;
wire writeRI;
wire writeZ;

// assign statements (if any)                          
UnidadeControle i1 (
// port map - connection between master ports and signals/registers   
	.T0(T0),
	.T1(T1),
	.T2(T2),
	.T3(T3),
	.T4(T4),
	.T5(T5),
	.T6(T6),
	.T7(T7),
	.T8(T8),
	.T9(T9),
	.clk(clk),
	.enter(enter),
	.incrementPC(incrementPC),
	.opULA(opULA),
	.read(read),
	.sADD(sADD),
	.sAND(sAND),
	.sDIR(sDIR),
	.sHLT(sHLT),
	.sIM(sIM),
	.sIN(sIN),
	.sIND(sIND),
	.sJ(sJ),
	.sJN(sJN),
	.sJZ(sJZ),
	.sLDA(sLDA),
	.sLDD(sLDD),
	.sN(sN),
	.sNOP(sNOP),
	.sNOT(sNOT),
	.sOR(sOR),
	.sOUT(sOUT),
	.sSHL(sSHL),
	.sSHR(sSHR),
	.sSOP(sSOP),
	.sSTA(sSTA),
	.sSTD(sSTD),
	.sSUB(sSUB),
	.sZ(sZ),
	.selectRDM(selectRDM),
	.selectREM(selectREM),
	.trLDD(trLDD),
	.trSTD(trSTD),
	.waitTR(waitTR),
	.writeAC(writeAC),
	.writeMEM(writeMEM),
	.writeN(writeN),
	.writeOUT(writeOUT),
	.writePC(writePC),
	.writeRDM(writeRDM),
	.writeREM(writeREM),
	.writeRI(writeRI),
	.writeZ(writeZ)
);
initial 
begin 
#1000000 $finish;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 

// enter
initial
begin
	enter = 1'b0;
end 

// sADD
initial
begin
	sADD = 1'b0;
end 

// sAND
initial
begin
	sAND = 1'b0;
end 

// sDIR
initial
begin
	sDIR = 1'b0;
end 

// sHLT
initial
begin
	sHLT = 1'b0;
end 

// sIM
initial
begin
	sIM = 1'b1;
end 

// sIN
initial
begin
	sIN = 1'b0;
end 

// sIND
initial
begin
	sIND = 1'b0;
end 

// sJ
initial
begin
	sJ = 1'b0;
end 

// sJN
initial
begin
	sJN = 1'b0;
end 

// sJZ
initial
begin
	sJZ = 1'b0;
end 

// sLDA
initial
begin
	sLDA = 1'b0;
end 

// sN
initial
begin
	sN = 1'b0;
end 

// sNOP
initial
begin
	sNOP = 1'b0;
end 

// sNOT
initial
begin
	sNOT = 1'b0;
end 

// sOR
initial
begin
	sOR = 1'b0;
end 

// sOUT
initial
begin
	sOUT = 1'b0;
end 

// sSHL
initial
begin
	sSHL = 1'b0;
end 

// sSHR
initial
begin
	sSHR = 1'b0;
end 

// sSOP
initial
begin
	sSOP = 1'b0;
end 

// sSTA
initial
begin
	sSTA = 1'b0;
end 

// sSTD
initial
begin
	sSTD = 1'b0;
end 

// sSUB
initial
begin
	sSUB = 1'b0;
end 

// sZ
initial
begin
	sZ = 1'b0;
end 

// sLDD
initial
begin
	sLDD = 1'b1;
end 

// waitTR
always
begin
	waitTR = 1'b0;
	waitTR = #100000 1'b1;
	#100000;
end 
endmodule

