// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/18/2020 14:51:18"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    UnidadeControle
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module UnidadeControle_vlg_sample_tst(
	clk,
	sADD,
	sAND,
	sDIR,
	sHLT,
	sIM,
	sIN,
	sIND,
	sJ,
	sJN,
	sJZ,
	sLDA,
	sN,
	sNOP,
	sNOT,
	sOR,
	sOUT,
	sSHL,
	sSHR,
	sSOP,
	sSTA,
	sSUB,
	sZ,
	sampler_tx
);
input  clk;
input  sADD;
input  sAND;
input  sDIR;
input  sHLT;
input  sIM;
input  sIN;
input  sIND;
input  sJ;
input  sJN;
input  sJZ;
input  sLDA;
input  sN;
input  sNOP;
input  sNOT;
input  sOR;
input  sOUT;
input  sSHL;
input  sSHR;
input  sSOP;
input  sSTA;
input  sSUB;
input  sZ;
output sampler_tx;

reg sample;
time current_time;
always @(clk or sADD or sAND or sDIR or sHLT or sIM or sIN or sIND or sJ or sJN or sJZ or sLDA or sN or sNOP or sNOT or sOR or sOUT or sSHL or sSHR or sSOP or sSTA or sSUB or sZ)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
    if ($realtime == 0 || $realtime != current_time)  
    begin                                             
        if (sample === 1'bx)                          
            sample = 0;                               
        else                                          
            sample = ~sample;                         
    end                                               
    current_time = $realtime;                         
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module UnidadeControle_vlg_check_tst (
	T0,
	T1,
	T2,
	T3,
	T4,
	T5,
	T6,
	T7,
	T8,
	T9,
	incrementPC,
	opULA,
	selectRDM,
	selectREM,
	writeAC,
	writeMEM,
	writeN,
	writeOUT,
	writePC,
	writeRDM,
	writeREM,
	writeRI,
	writeZ,
	sampler_rx
);
input  T0;
input  T1;
input  T2;
input  T3;
input  T4;
input  T5;
input  T6;
input  T7;
input  T8;
input  T9;
input  incrementPC;
input [2:0] opULA;
input [1:0] selectRDM;
input  selectREM;
input  writeAC;
input  writeMEM;
input  writeN;
input  writeOUT;
input  writePC;
input  writeRDM;
input  writeREM;
input  writeRI;
input  writeZ;
input sampler_rx;

reg  T0_expected;
reg  T1_expected;
reg  T2_expected;
reg  T3_expected;
reg  T4_expected;
reg  T5_expected;
reg  T6_expected;
reg  T7_expected;
reg  T8_expected;
reg  T9_expected;
reg  incrementPC_expected;
reg [2:0] opULA_expected;
reg [1:0] selectRDM_expected;
reg  selectREM_expected;
reg  writeAC_expected;
reg  writeMEM_expected;
reg  writeN_expected;
reg  writeOUT_expected;
reg  writePC_expected;
reg  writeRDM_expected;
reg  writeREM_expected;
reg  writeRI_expected;
reg  writeZ_expected;

reg  T0_prev;
reg  T1_prev;
reg  T2_prev;
reg  T3_prev;
reg  T4_prev;
reg  T5_prev;
reg  T6_prev;
reg  T7_prev;
reg  T8_prev;
reg  T9_prev;
reg  incrementPC_prev;
reg [2:0] opULA_prev;
reg [1:0] selectRDM_prev;
reg  selectREM_prev;
reg  writeAC_prev;
reg  writeMEM_prev;
reg  writeN_prev;
reg  writeOUT_prev;
reg  writePC_prev;
reg  writeRDM_prev;
reg  writeREM_prev;
reg  writeRI_prev;
reg  writeZ_prev;

reg  T0_expected_prev;
reg  T1_expected_prev;
reg  T2_expected_prev;
reg  T3_expected_prev;
reg  T4_expected_prev;
reg  T5_expected_prev;
reg  T6_expected_prev;
reg  T7_expected_prev;
reg  T8_expected_prev;
reg  T9_expected_prev;
reg  incrementPC_expected_prev;
reg [2:0] opULA_expected_prev;
reg [1:0] selectRDM_expected_prev;
reg  selectREM_expected_prev;
reg  writeAC_expected_prev;
reg  writeMEM_expected_prev;
reg  writeN_expected_prev;
reg  writeOUT_expected_prev;
reg  writePC_expected_prev;
reg  writeRDM_expected_prev;
reg  writeREM_expected_prev;
reg  writeRI_expected_prev;
reg  writeZ_expected_prev;

reg  last_T0_exp;
reg  last_T1_exp;
reg  last_T2_exp;
reg  last_T3_exp;
reg  last_T4_exp;
reg  last_T5_exp;
reg  last_T6_exp;
reg  last_T7_exp;
reg  last_T8_exp;
reg  last_T9_exp;
reg  last_incrementPC_exp;
reg [2:0] last_opULA_exp;
reg [1:0] last_selectRDM_exp;
reg  last_selectREM_exp;
reg  last_writeAC_exp;
reg  last_writeMEM_exp;
reg  last_writeN_exp;
reg  last_writeOUT_exp;
reg  last_writePC_exp;
reg  last_writeRDM_exp;
reg  last_writeREM_exp;
reg  last_writeRI_exp;
reg  last_writeZ_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:23] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 23'b1;
end

// update real /o prevs

always @(trigger)
begin
	T0_prev = T0;
	T1_prev = T1;
	T2_prev = T2;
	T3_prev = T3;
	T4_prev = T4;
	T5_prev = T5;
	T6_prev = T6;
	T7_prev = T7;
	T8_prev = T8;
	T9_prev = T9;
	incrementPC_prev = incrementPC;
	opULA_prev = opULA;
	selectRDM_prev = selectRDM;
	selectREM_prev = selectREM;
	writeAC_prev = writeAC;
	writeMEM_prev = writeMEM;
	writeN_prev = writeN;
	writeOUT_prev = writeOUT;
	writePC_prev = writePC;
	writeRDM_prev = writeRDM;
	writeREM_prev = writeREM;
	writeRI_prev = writeRI;
	writeZ_prev = writeZ;
end

// update expected /o prevs

always @(trigger)
begin
	T0_expected_prev = T0_expected;
	T1_expected_prev = T1_expected;
	T2_expected_prev = T2_expected;
	T3_expected_prev = T3_expected;
	T4_expected_prev = T4_expected;
	T5_expected_prev = T5_expected;
	T6_expected_prev = T6_expected;
	T7_expected_prev = T7_expected;
	T8_expected_prev = T8_expected;
	T9_expected_prev = T9_expected;
	incrementPC_expected_prev = incrementPC_expected;
	opULA_expected_prev = opULA_expected;
	selectRDM_expected_prev = selectRDM_expected;
	selectREM_expected_prev = selectREM_expected;
	writeAC_expected_prev = writeAC_expected;
	writeMEM_expected_prev = writeMEM_expected;
	writeN_expected_prev = writeN_expected;
	writeOUT_expected_prev = writeOUT_expected;
	writePC_expected_prev = writePC_expected;
	writeRDM_expected_prev = writeRDM_expected;
	writeREM_expected_prev = writeREM_expected;
	writeRI_expected_prev = writeRI_expected;
	writeZ_expected_prev = writeZ_expected;
end


// expected opULA[ 2 ]
initial
begin
	opULA_expected[2] = 1'bX;
end 
// expected opULA[ 1 ]
initial
begin
	opULA_expected[1] = 1'bX;
end 
// expected opULA[ 0 ]
initial
begin
	opULA_expected[0] = 1'bX;
end 
// expected selectRDM[ 1 ]
initial
begin
	selectRDM_expected[1] = 1'bX;
end 
// expected selectRDM[ 0 ]
initial
begin
	selectRDM_expected[0] = 1'bX;
end 

// expected T9
initial
begin
	T9_expected = 1'bX;
end 

// expected T8
initial
begin
	T8_expected = 1'bX;
end 

// expected T7
initial
begin
	T7_expected = 1'bX;
end 

// expected T6
initial
begin
	T6_expected = 1'bX;
end 

// expected T5
initial
begin
	T5_expected = 1'bX;
end 

// expected T4
initial
begin
	T4_expected = 1'bX;
end 

// expected T3
initial
begin
	T3_expected = 1'bX;
end 

// expected T2
initial
begin
	T2_expected = 1'bX;
end 

// expected T1
initial
begin
	T1_expected = 1'bX;
end 

// expected T0
initial
begin
	T0_expected = 1'bX;
end 

// expected incrementPC
initial
begin
	incrementPC_expected = 1'bX;
end 

// expected selectREM
initial
begin
	selectREM_expected = 1'bX;
end 

// expected writeAC
initial
begin
	writeAC_expected = 1'bX;
end 

// expected writeMEM
initial
begin
	writeMEM_expected = 1'bX;
end 

// expected writeN
initial
begin
	writeN_expected = 1'bX;
end 

// expected writeOUT
initial
begin
	writeOUT_expected = 1'bX;
end 

// expected writePC
initial
begin
	writePC_expected = 1'bX;
end 

// expected writeRDM
initial
begin
	writeRDM_expected = 1'bX;
end 

// expected writeREM
initial
begin
	writeREM_expected = 1'bX;
end 

// expected writeRI
initial
begin
	writeRI_expected = 1'bX;
end 

// expected writeZ
initial
begin
	writeZ_expected = 1'bX;
end 
// generate trigger
always @(T0_expected or T0 or T1_expected or T1 or T2_expected or T2 or T3_expected or T3 or T4_expected or T4 or T5_expected or T5 or T6_expected or T6 or T7_expected or T7 or T8_expected or T8 or T9_expected or T9 or incrementPC_expected or incrementPC or opULA_expected or opULA or selectRDM_expected or selectRDM or selectREM_expected or selectREM or writeAC_expected or writeAC or writeMEM_expected or writeMEM or writeN_expected or writeN or writeOUT_expected or writeOUT or writePC_expected or writePC or writeRDM_expected or writeRDM or writeREM_expected or writeREM or writeRI_expected or writeRI or writeZ_expected or writeZ)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected T0 = %b | expected T1 = %b | expected T2 = %b | expected T3 = %b | expected T4 = %b | expected T5 = %b | expected T6 = %b | expected T7 = %b | expected T8 = %b | expected T9 = %b | expected incrementPC = %b | expected opULA = %b | expected selectRDM = %b | expected selectREM = %b | expected writeAC = %b | expected writeMEM = %b | expected writeN = %b | expected writeOUT = %b | expected writePC = %b | expected writeRDM = %b | expected writeREM = %b | expected writeRI = %b | expected writeZ = %b | ",T0_expected_prev,T1_expected_prev,T2_expected_prev,T3_expected_prev,T4_expected_prev,T5_expected_prev,T6_expected_prev,T7_expected_prev,T8_expected_prev,T9_expected_prev,incrementPC_expected_prev,opULA_expected_prev,selectRDM_expected_prev,selectREM_expected_prev,writeAC_expected_prev,writeMEM_expected_prev,writeN_expected_prev,writeOUT_expected_prev,writePC_expected_prev,writeRDM_expected_prev,writeREM_expected_prev,writeRI_expected_prev,writeZ_expected_prev);
	$display("| real T0 = %b | real T1 = %b | real T2 = %b | real T3 = %b | real T4 = %b | real T5 = %b | real T6 = %b | real T7 = %b | real T8 = %b | real T9 = %b | real incrementPC = %b | real opULA = %b | real selectRDM = %b | real selectREM = %b | real writeAC = %b | real writeMEM = %b | real writeN = %b | real writeOUT = %b | real writePC = %b | real writeRDM = %b | real writeREM = %b | real writeRI = %b | real writeZ = %b | ",T0_prev,T1_prev,T2_prev,T3_prev,T4_prev,T5_prev,T6_prev,T7_prev,T8_prev,T9_prev,incrementPC_prev,opULA_prev,selectRDM_prev,selectREM_prev,writeAC_prev,writeMEM_prev,writeN_prev,writeOUT_prev,writePC_prev,writeRDM_prev,writeREM_prev,writeRI_prev,writeZ_prev);
`endif
	if (
		( T0_expected_prev !== 1'bx ) && ( T0_prev !== T0_expected_prev )
		&& ((T0_expected_prev !== last_T0_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port T0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", T0_expected_prev);
		$display ("     Real value = %b", T0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_T0_exp = T0_expected_prev;
	end
	if (
		( T1_expected_prev !== 1'bx ) && ( T1_prev !== T1_expected_prev )
		&& ((T1_expected_prev !== last_T1_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port T1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", T1_expected_prev);
		$display ("     Real value = %b", T1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_T1_exp = T1_expected_prev;
	end
	if (
		( T2_expected_prev !== 1'bx ) && ( T2_prev !== T2_expected_prev )
		&& ((T2_expected_prev !== last_T2_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port T2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", T2_expected_prev);
		$display ("     Real value = %b", T2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_T2_exp = T2_expected_prev;
	end
	if (
		( T3_expected_prev !== 1'bx ) && ( T3_prev !== T3_expected_prev )
		&& ((T3_expected_prev !== last_T3_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port T3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", T3_expected_prev);
		$display ("     Real value = %b", T3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_T3_exp = T3_expected_prev;
	end
	if (
		( T4_expected_prev !== 1'bx ) && ( T4_prev !== T4_expected_prev )
		&& ((T4_expected_prev !== last_T4_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port T4 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", T4_expected_prev);
		$display ("     Real value = %b", T4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_T4_exp = T4_expected_prev;
	end
	if (
		( T5_expected_prev !== 1'bx ) && ( T5_prev !== T5_expected_prev )
		&& ((T5_expected_prev !== last_T5_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port T5 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", T5_expected_prev);
		$display ("     Real value = %b", T5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_T5_exp = T5_expected_prev;
	end
	if (
		( T6_expected_prev !== 1'bx ) && ( T6_prev !== T6_expected_prev )
		&& ((T6_expected_prev !== last_T6_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port T6 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", T6_expected_prev);
		$display ("     Real value = %b", T6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_T6_exp = T6_expected_prev;
	end
	if (
		( T7_expected_prev !== 1'bx ) && ( T7_prev !== T7_expected_prev )
		&& ((T7_expected_prev !== last_T7_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port T7 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", T7_expected_prev);
		$display ("     Real value = %b", T7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_T7_exp = T7_expected_prev;
	end
	if (
		( T8_expected_prev !== 1'bx ) && ( T8_prev !== T8_expected_prev )
		&& ((T8_expected_prev !== last_T8_exp) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port T8 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", T8_expected_prev);
		$display ("     Real value = %b", T8_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_T8_exp = T8_expected_prev;
	end
	if (
		( T9_expected_prev !== 1'bx ) && ( T9_prev !== T9_expected_prev )
		&& ((T9_expected_prev !== last_T9_exp) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port T9 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", T9_expected_prev);
		$display ("     Real value = %b", T9_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_T9_exp = T9_expected_prev;
	end
	if (
		( incrementPC_expected_prev !== 1'bx ) && ( incrementPC_prev !== incrementPC_expected_prev )
		&& ((incrementPC_expected_prev !== last_incrementPC_exp) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port incrementPC :: @time = %t",  $realtime);
		$display ("     Expected value = %b", incrementPC_expected_prev);
		$display ("     Real value = %b", incrementPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_incrementPC_exp = incrementPC_expected_prev;
	end
	if (
		( opULA_expected_prev[0] !== 1'bx ) && ( opULA_prev[0] !== opULA_expected_prev[0] )
		&& ((opULA_expected_prev[0] !== last_opULA_exp[0]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opULA[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opULA_expected_prev);
		$display ("     Real value = %b", opULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_opULA_exp[0] = opULA_expected_prev[0];
	end
	if (
		( opULA_expected_prev[1] !== 1'bx ) && ( opULA_prev[1] !== opULA_expected_prev[1] )
		&& ((opULA_expected_prev[1] !== last_opULA_exp[1]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opULA[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opULA_expected_prev);
		$display ("     Real value = %b", opULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_opULA_exp[1] = opULA_expected_prev[1];
	end
	if (
		( opULA_expected_prev[2] !== 1'bx ) && ( opULA_prev[2] !== opULA_expected_prev[2] )
		&& ((opULA_expected_prev[2] !== last_opULA_exp[2]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opULA[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opULA_expected_prev);
		$display ("     Real value = %b", opULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_opULA_exp[2] = opULA_expected_prev[2];
	end
	if (
		( selectRDM_expected_prev[0] !== 1'bx ) && ( selectRDM_prev[0] !== selectRDM_expected_prev[0] )
		&& ((selectRDM_expected_prev[0] !== last_selectRDM_exp[0]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port selectRDM[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", selectRDM_expected_prev);
		$display ("     Real value = %b", selectRDM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_selectRDM_exp[0] = selectRDM_expected_prev[0];
	end
	if (
		( selectRDM_expected_prev[1] !== 1'bx ) && ( selectRDM_prev[1] !== selectRDM_expected_prev[1] )
		&& ((selectRDM_expected_prev[1] !== last_selectRDM_exp[1]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port selectRDM[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", selectRDM_expected_prev);
		$display ("     Real value = %b", selectRDM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_selectRDM_exp[1] = selectRDM_expected_prev[1];
	end
	if (
		( selectREM_expected_prev !== 1'bx ) && ( selectREM_prev !== selectREM_expected_prev )
		&& ((selectREM_expected_prev !== last_selectREM_exp) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port selectREM :: @time = %t",  $realtime);
		$display ("     Expected value = %b", selectREM_expected_prev);
		$display ("     Real value = %b", selectREM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_selectREM_exp = selectREM_expected_prev;
	end
	if (
		( writeAC_expected_prev !== 1'bx ) && ( writeAC_prev !== writeAC_expected_prev )
		&& ((writeAC_expected_prev !== last_writeAC_exp) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port writeAC :: @time = %t",  $realtime);
		$display ("     Expected value = %b", writeAC_expected_prev);
		$display ("     Real value = %b", writeAC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_writeAC_exp = writeAC_expected_prev;
	end
	if (
		( writeMEM_expected_prev !== 1'bx ) && ( writeMEM_prev !== writeMEM_expected_prev )
		&& ((writeMEM_expected_prev !== last_writeMEM_exp) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port writeMEM :: @time = %t",  $realtime);
		$display ("     Expected value = %b", writeMEM_expected_prev);
		$display ("     Real value = %b", writeMEM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_writeMEM_exp = writeMEM_expected_prev;
	end
	if (
		( writeN_expected_prev !== 1'bx ) && ( writeN_prev !== writeN_expected_prev )
		&& ((writeN_expected_prev !== last_writeN_exp) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port writeN :: @time = %t",  $realtime);
		$display ("     Expected value = %b", writeN_expected_prev);
		$display ("     Real value = %b", writeN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_writeN_exp = writeN_expected_prev;
	end
	if (
		( writeOUT_expected_prev !== 1'bx ) && ( writeOUT_prev !== writeOUT_expected_prev )
		&& ((writeOUT_expected_prev !== last_writeOUT_exp) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port writeOUT :: @time = %t",  $realtime);
		$display ("     Expected value = %b", writeOUT_expected_prev);
		$display ("     Real value = %b", writeOUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_writeOUT_exp = writeOUT_expected_prev;
	end
	if (
		( writePC_expected_prev !== 1'bx ) && ( writePC_prev !== writePC_expected_prev )
		&& ((writePC_expected_prev !== last_writePC_exp) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port writePC :: @time = %t",  $realtime);
		$display ("     Expected value = %b", writePC_expected_prev);
		$display ("     Real value = %b", writePC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_writePC_exp = writePC_expected_prev;
	end
	if (
		( writeRDM_expected_prev !== 1'bx ) && ( writeRDM_prev !== writeRDM_expected_prev )
		&& ((writeRDM_expected_prev !== last_writeRDM_exp) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port writeRDM :: @time = %t",  $realtime);
		$display ("     Expected value = %b", writeRDM_expected_prev);
		$display ("     Real value = %b", writeRDM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_writeRDM_exp = writeRDM_expected_prev;
	end
	if (
		( writeREM_expected_prev !== 1'bx ) && ( writeREM_prev !== writeREM_expected_prev )
		&& ((writeREM_expected_prev !== last_writeREM_exp) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port writeREM :: @time = %t",  $realtime);
		$display ("     Expected value = %b", writeREM_expected_prev);
		$display ("     Real value = %b", writeREM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_writeREM_exp = writeREM_expected_prev;
	end
	if (
		( writeRI_expected_prev !== 1'bx ) && ( writeRI_prev !== writeRI_expected_prev )
		&& ((writeRI_expected_prev !== last_writeRI_exp) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port writeRI :: @time = %t",  $realtime);
		$display ("     Expected value = %b", writeRI_expected_prev);
		$display ("     Real value = %b", writeRI_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_writeRI_exp = writeRI_expected_prev;
	end
	if (
		( writeZ_expected_prev !== 1'bx ) && ( writeZ_prev !== writeZ_expected_prev )
		&& ((writeZ_expected_prev !== last_writeZ_exp) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port writeZ :: @time = %t",  $realtime);
		$display ("     Expected value = %b", writeZ_expected_prev);
		$display ("     Real value = %b", writeZ_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_writeZ_exp = writeZ_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module UnidadeControle_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg sADD;
reg sAND;
reg sDIR;
reg sHLT;
reg sIM;
reg sIN;
reg sIND;
reg sJ;
reg sJN;
reg sJZ;
reg sLDA;
reg sN;
reg sNOP;
reg sNOT;
reg sOR;
reg sOUT;
reg sSHL;
reg sSHR;
reg sSOP;
reg sSTA;
reg sSUB;
reg sZ;
// wires                                               
wire T0;
wire T1;
wire T2;
wire T3;
wire T4;
wire T5;
wire T6;
wire T7;
wire T8;
wire T9;
wire incrementPC;
wire [2:0] opULA;
wire [1:0] selectRDM;
wire selectREM;
wire writeAC;
wire writeMEM;
wire writeN;
wire writeOUT;
wire writePC;
wire writeRDM;
wire writeREM;
wire writeRI;
wire writeZ;

wire sampler;                             

// assign statements (if any)                          
UnidadeControle i1 (
// port map - connection between master ports and signals/registers   
	.T0(T0),
	.T1(T1),
	.T2(T2),
	.T3(T3),
	.T4(T4),
	.T5(T5),
	.T6(T6),
	.T7(T7),
	.T8(T8),
	.T9(T9),
	.clk(clk),
	.incrementPC(incrementPC),
	.opULA(opULA),
	.sADD(sADD),
	.sAND(sAND),
	.sDIR(sDIR),
	.sHLT(sHLT),
	.sIM(sIM),
	.sIN(sIN),
	.sIND(sIND),
	.sJ(sJ),
	.sJN(sJN),
	.sJZ(sJZ),
	.sLDA(sLDA),
	.sN(sN),
	.sNOP(sNOP),
	.sNOT(sNOT),
	.sOR(sOR),
	.sOUT(sOUT),
	.sSHL(sSHL),
	.sSHR(sSHR),
	.sSOP(sSOP),
	.sSTA(sSTA),
	.sSUB(sSUB),
	.sZ(sZ),
	.selectRDM(selectRDM),
	.selectREM(selectREM),
	.writeAC(writeAC),
	.writeMEM(writeMEM),
	.writeN(writeN),
	.writeOUT(writeOUT),
	.writePC(writePC),
	.writeRDM(writeRDM),
	.writeREM(writeREM),
	.writeRI(writeRI),
	.writeZ(writeZ)
);

// clk
always
begin
	clk = 1'b0;
	clk = #20000 1'b1;
	#20000;
end 

// sADD
initial
begin
	sADD = 1'b0;
end 

// sAND
initial
begin
	sAND = 1'b0;
end 

// sDIR
initial
begin
	sDIR = 1'b0;
end 

// sHLT
initial
begin
	sHLT = 1'b0;
end 

// sIM
initial
begin
	sIM = 1'b1;
end 

// sIN
initial
begin
	sIN = 1'b0;
end 

// sIND
initial
begin
	sIND = 1'b0;
end 

// sJ
initial
begin
	sJ = 1'b0;
end 

// sJN
initial
begin
	sJN = 1'b0;
end 

// sJZ
initial
begin
	sJZ = 1'b0;
end 

// sLDA
initial
begin
	sLDA = 1'b1;
end 

// sN
initial
begin
	sN = 1'b0;
end 

// sNOP
initial
begin
	sNOP = 1'b0;
end 

// sNOT
initial
begin
	sNOT = 1'b0;
end 

// sOR
initial
begin
	sOR = 1'b0;
end 

// sOUT
initial
begin
	sOUT = 1'b0;
end 

// sSHL
initial
begin
	sSHL = 1'b0;
end 

// sSHR
initial
begin
	sSHR = 1'b0;
end 

// sSOP
initial
begin
	sSOP = 1'b0;
end 

// sSTA
initial
begin
	sSTA = 1'b0;
end 

// sSUB
initial
begin
	sSUB = 1'b0;
end 

// sZ
initial
begin
	sZ = 1'b0;
end 

UnidadeControle_vlg_sample_tst tb_sample (
	.clk(clk),
	.sADD(sADD),
	.sAND(sAND),
	.sDIR(sDIR),
	.sHLT(sHLT),
	.sIM(sIM),
	.sIN(sIN),
	.sIND(sIND),
	.sJ(sJ),
	.sJN(sJN),
	.sJZ(sJZ),
	.sLDA(sLDA),
	.sN(sN),
	.sNOP(sNOP),
	.sNOT(sNOT),
	.sOR(sOR),
	.sOUT(sOUT),
	.sSHL(sSHL),
	.sSHR(sSHR),
	.sSOP(sSOP),
	.sSTA(sSTA),
	.sSUB(sSUB),
	.sZ(sZ),
	.sampler_tx(sampler)
);

UnidadeControle_vlg_check_tst tb_out(
	.T0(T0),
	.T1(T1),
	.T2(T2),
	.T3(T3),
	.T4(T4),
	.T5(T5),
	.T6(T6),
	.T7(T7),
	.T8(T8),
	.T9(T9),
	.incrementPC(incrementPC),
	.opULA(opULA),
	.selectRDM(selectRDM),
	.selectREM(selectREM),
	.writeAC(writeAC),
	.writeMEM(writeMEM),
	.writeN(writeN),
	.writeOUT(writeOUT),
	.writePC(writePC),
	.writeRDM(writeRDM),
	.writeREM(writeREM),
	.writeRI(writeRI),
	.writeZ(writeZ),
	.sampler_rx(sampler)
);
endmodule

