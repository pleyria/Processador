// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/17/2020 20:37:41"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    MUX4
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module MUX4_vlg_sample_tst(
	in00,
	in01,
	in10,
	in11,
	select,
	sampler_tx
);
input [15:0] in00;
input [15:0] in01;
input [15:0] in10;
input [15:0] in11;
input [1:0] select;
output sampler_tx;

reg sample;
time current_time;
always @(in00 or in01 or in10 or in11 or select)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
    if ($realtime == 0 || $realtime != current_time)  
    begin                                             
        if (sample === 1'bx)                          
            sample = 0;                               
        else                                          
            sample = ~sample;                         
    end                                               
    current_time = $realtime;                         
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module MUX4_vlg_check_tst (
	q,
	sampler_rx
);
input [15:0] q;
input sampler_rx;

reg [15:0] q_expected;

reg [15:0] q_prev;

reg [15:0] q_expected_prev;

reg [15:0] last_q_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:1] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 1'b1;
end

// update real /o prevs

always @(trigger)
begin
	q_prev = q;
end

// update expected /o prevs

always @(trigger)
begin
	q_expected_prev = q_expected;
end


// expected q[ 15 ]
initial
begin
	q_expected[15] = 1'bX;
end 
// expected q[ 14 ]
initial
begin
	q_expected[14] = 1'bX;
end 
// expected q[ 13 ]
initial
begin
	q_expected[13] = 1'bX;
end 
// expected q[ 12 ]
initial
begin
	q_expected[12] = 1'bX;
end 
// expected q[ 11 ]
initial
begin
	q_expected[11] = 1'bX;
end 
// expected q[ 10 ]
initial
begin
	q_expected[10] = 1'bX;
end 
// expected q[ 9 ]
initial
begin
	q_expected[9] = 1'bX;
end 
// expected q[ 8 ]
initial
begin
	q_expected[8] = 1'bX;
end 
// expected q[ 7 ]
initial
begin
	q_expected[7] = 1'bX;
end 
// expected q[ 6 ]
initial
begin
	q_expected[6] = 1'bX;
end 
// expected q[ 5 ]
initial
begin
	q_expected[5] = 1'bX;
end 
// expected q[ 4 ]
initial
begin
	q_expected[4] = 1'bX;
end 
// expected q[ 3 ]
initial
begin
	q_expected[3] = 1'bX;
end 
// expected q[ 2 ]
initial
begin
	q_expected[2] = 1'bX;
end 
// expected q[ 1 ]
initial
begin
	q_expected[1] = 1'bX;
end 
// expected q[ 0 ]
initial
begin
	q_expected[0] = 1'bX;
end 
// generate trigger
always @(q_expected or q)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected q = %b | ",q_expected_prev);
	$display("| real q = %b | ",q_prev);
`endif
	if (
		( q_expected_prev[0] !== 1'bx ) && ( q_prev[0] !== q_expected_prev[0] )
		&& ((q_expected_prev[0] !== last_q_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q_expected_prev);
		$display ("     Real value = %b", q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_q_exp[0] = q_expected_prev[0];
	end
	if (
		( q_expected_prev[1] !== 1'bx ) && ( q_prev[1] !== q_expected_prev[1] )
		&& ((q_expected_prev[1] !== last_q_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q_expected_prev);
		$display ("     Real value = %b", q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_q_exp[1] = q_expected_prev[1];
	end
	if (
		( q_expected_prev[2] !== 1'bx ) && ( q_prev[2] !== q_expected_prev[2] )
		&& ((q_expected_prev[2] !== last_q_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q_expected_prev);
		$display ("     Real value = %b", q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_q_exp[2] = q_expected_prev[2];
	end
	if (
		( q_expected_prev[3] !== 1'bx ) && ( q_prev[3] !== q_expected_prev[3] )
		&& ((q_expected_prev[3] !== last_q_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q_expected_prev);
		$display ("     Real value = %b", q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_q_exp[3] = q_expected_prev[3];
	end
	if (
		( q_expected_prev[4] !== 1'bx ) && ( q_prev[4] !== q_expected_prev[4] )
		&& ((q_expected_prev[4] !== last_q_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q_expected_prev);
		$display ("     Real value = %b", q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_q_exp[4] = q_expected_prev[4];
	end
	if (
		( q_expected_prev[5] !== 1'bx ) && ( q_prev[5] !== q_expected_prev[5] )
		&& ((q_expected_prev[5] !== last_q_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q_expected_prev);
		$display ("     Real value = %b", q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_q_exp[5] = q_expected_prev[5];
	end
	if (
		( q_expected_prev[6] !== 1'bx ) && ( q_prev[6] !== q_expected_prev[6] )
		&& ((q_expected_prev[6] !== last_q_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q_expected_prev);
		$display ("     Real value = %b", q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_q_exp[6] = q_expected_prev[6];
	end
	if (
		( q_expected_prev[7] !== 1'bx ) && ( q_prev[7] !== q_expected_prev[7] )
		&& ((q_expected_prev[7] !== last_q_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q_expected_prev);
		$display ("     Real value = %b", q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_q_exp[7] = q_expected_prev[7];
	end
	if (
		( q_expected_prev[8] !== 1'bx ) && ( q_prev[8] !== q_expected_prev[8] )
		&& ((q_expected_prev[8] !== last_q_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q_expected_prev);
		$display ("     Real value = %b", q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_q_exp[8] = q_expected_prev[8];
	end
	if (
		( q_expected_prev[9] !== 1'bx ) && ( q_prev[9] !== q_expected_prev[9] )
		&& ((q_expected_prev[9] !== last_q_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q_expected_prev);
		$display ("     Real value = %b", q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_q_exp[9] = q_expected_prev[9];
	end
	if (
		( q_expected_prev[10] !== 1'bx ) && ( q_prev[10] !== q_expected_prev[10] )
		&& ((q_expected_prev[10] !== last_q_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q_expected_prev);
		$display ("     Real value = %b", q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_q_exp[10] = q_expected_prev[10];
	end
	if (
		( q_expected_prev[11] !== 1'bx ) && ( q_prev[11] !== q_expected_prev[11] )
		&& ((q_expected_prev[11] !== last_q_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q_expected_prev);
		$display ("     Real value = %b", q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_q_exp[11] = q_expected_prev[11];
	end
	if (
		( q_expected_prev[12] !== 1'bx ) && ( q_prev[12] !== q_expected_prev[12] )
		&& ((q_expected_prev[12] !== last_q_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q_expected_prev);
		$display ("     Real value = %b", q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_q_exp[12] = q_expected_prev[12];
	end
	if (
		( q_expected_prev[13] !== 1'bx ) && ( q_prev[13] !== q_expected_prev[13] )
		&& ((q_expected_prev[13] !== last_q_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q_expected_prev);
		$display ("     Real value = %b", q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_q_exp[13] = q_expected_prev[13];
	end
	if (
		( q_expected_prev[14] !== 1'bx ) && ( q_prev[14] !== q_expected_prev[14] )
		&& ((q_expected_prev[14] !== last_q_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q_expected_prev);
		$display ("     Real value = %b", q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_q_exp[14] = q_expected_prev[14];
	end
	if (
		( q_expected_prev[15] !== 1'bx ) && ( q_prev[15] !== q_expected_prev[15] )
		&& ((q_expected_prev[15] !== last_q_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q_expected_prev);
		$display ("     Real value = %b", q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_q_exp[15] = q_expected_prev[15];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module MUX4_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [15:0] in00;
reg [15:0] in01;
reg [15:0] in10;
reg [15:0] in11;
reg [1:0] select;
// wires                                               
wire [15:0] q;

wire sampler;                             

// assign statements (if any)                          
MUX4 i1 (
// port map - connection between master ports and signals/registers   
	.in00(in00),
	.in01(in01),
	.in10(in10),
	.in11(in11),
	.q(q),
	.select(select)
);
// select[ 1 ]
initial
begin
	repeat(12)
	begin
		select[1] = 1'b0;
		select[1] = #40000 1'b1;
		# 40000;
	end
	select[1] = 1'b0;
end 
// select[ 0 ]
always
begin
	select[0] = 1'b0;
	select[0] = #20000 1'b1;
	#20000;
end 
// in00[ 15 ]
initial
begin
	in00[15] = 1'b1;
end 
// in00[ 14 ]
initial
begin
	in00[14] = 1'b1;
end 
// in00[ 13 ]
initial
begin
	in00[13] = 1'b1;
end 
// in00[ 12 ]
initial
begin
	in00[12] = 1'b1;
end 
// in00[ 11 ]
initial
begin
	in00[11] = 1'b1;
end 
// in00[ 10 ]
initial
begin
	in00[10] = 1'b1;
end 
// in00[ 9 ]
initial
begin
	in00[9] = 1'b1;
end 
// in00[ 8 ]
initial
begin
	in00[8] = 1'b1;
end 
// in00[ 7 ]
initial
begin
	in00[7] = 1'b1;
end 
// in00[ 6 ]
initial
begin
	in00[6] = 1'b1;
end 
// in00[ 5 ]
initial
begin
	in00[5] = 1'b1;
end 
// in00[ 4 ]
initial
begin
	in00[4] = 1'b0;
end 
// in00[ 3 ]
initial
begin
	in00[3] = 1'b0;
end 
// in00[ 2 ]
initial
begin
	in00[2] = 1'b0;
end 
// in00[ 1 ]
initial
begin
	in00[1] = 1'b1;
end 
// in00[ 0 ]
initial
begin
	in00[0] = 1'b0;
end 
// in01[ 15 ]
initial
begin
	in01[15] = 1'b0;
end 
// in01[ 14 ]
initial
begin
	in01[14] = 1'b0;
end 
// in01[ 13 ]
initial
begin
	in01[13] = 1'b0;
end 
// in01[ 12 ]
initial
begin
	in01[12] = 1'b0;
end 
// in01[ 11 ]
initial
begin
	in01[11] = 1'b0;
end 
// in01[ 10 ]
initial
begin
	in01[10] = 1'b0;
end 
// in01[ 9 ]
initial
begin
	in01[9] = 1'b1;
end 
// in01[ 8 ]
initial
begin
	in01[8] = 1'b0;
end 
// in01[ 7 ]
initial
begin
	in01[7] = 1'b0;
end 
// in01[ 6 ]
initial
begin
	in01[6] = 1'b0;
end 
// in01[ 5 ]
initial
begin
	in01[5] = 1'b1;
end 
// in01[ 4 ]
initial
begin
	in01[4] = 1'b0;
end 
// in01[ 3 ]
initial
begin
	in01[3] = 1'b0;
end 
// in01[ 2 ]
initial
begin
	in01[2] = 1'b0;
end 
// in01[ 1 ]
initial
begin
	in01[1] = 1'b1;
end 
// in01[ 0 ]
initial
begin
	in01[0] = 1'b1;
end 
// in10[ 15 ]
initial
begin
	in10[15] = 1'b0;
end 
// in10[ 14 ]
initial
begin
	in10[14] = 1'b0;
end 
// in10[ 13 ]
initial
begin
	in10[13] = 1'b0;
end 
// in10[ 12 ]
initial
begin
	in10[12] = 1'b0;
end 
// in10[ 11 ]
initial
begin
	in10[11] = 1'b0;
end 
// in10[ 10 ]
initial
begin
	in10[10] = 1'b0;
end 
// in10[ 9 ]
initial
begin
	in10[9] = 1'b0;
end 
// in10[ 8 ]
initial
begin
	in10[8] = 1'b0;
end 
// in10[ 7 ]
initial
begin
	in10[7] = 1'b0;
end 
// in10[ 6 ]
initial
begin
	in10[6] = 1'b0;
end 
// in10[ 5 ]
initial
begin
	in10[5] = 1'b0;
end 
// in10[ 4 ]
initial
begin
	in10[4] = 1'b0;
end 
// in10[ 3 ]
initial
begin
	in10[3] = 1'b0;
end 
// in10[ 2 ]
initial
begin
	in10[2] = 1'b0;
end 
// in10[ 1 ]
initial
begin
	in10[1] = 1'b1;
end 
// in10[ 0 ]
initial
begin
	in10[0] = 1'b1;
end 
// in11[ 15 ]
initial
begin
	in11[15] = 1'b0;
end 
// in11[ 14 ]
initial
begin
	in11[14] = 1'b0;
end 
// in11[ 13 ]
initial
begin
	in11[13] = 1'b0;
end 
// in11[ 12 ]
initial
begin
	in11[12] = 1'b0;
end 
// in11[ 11 ]
initial
begin
	in11[11] = 1'b0;
end 
// in11[ 10 ]
initial
begin
	in11[10] = 1'b0;
end 
// in11[ 9 ]
initial
begin
	in11[9] = 1'b0;
end 
// in11[ 8 ]
initial
begin
	in11[8] = 1'b0;
end 
// in11[ 7 ]
initial
begin
	in11[7] = 1'b0;
end 
// in11[ 6 ]
initial
begin
	in11[6] = 1'b1;
end 
// in11[ 5 ]
initial
begin
	in11[5] = 1'b0;
end 
// in11[ 4 ]
initial
begin
	in11[4] = 1'b1;
end 
// in11[ 3 ]
initial
begin
	in11[3] = 1'b0;
end 
// in11[ 2 ]
initial
begin
	in11[2] = 1'b1;
end 
// in11[ 1 ]
initial
begin
	in11[1] = 1'b1;
end 
// in11[ 0 ]
initial
begin
	in11[0] = 1'b1;
end 

MUX4_vlg_sample_tst tb_sample (
	.in00(in00),
	.in01(in01),
	.in10(in10),
	.in11(in11),
	.select(select),
	.sampler_tx(sampler)
);

MUX4_vlg_check_tst tb_out(
	.q(q),
	.sampler_rx(sampler)
);
endmodule

