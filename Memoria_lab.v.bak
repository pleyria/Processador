// Memoria RAM
module Memoria_lab
#(parameter DATA_WIDTH=16, parameter ADDR_WIDTH=16)
(
	input [(DATA_WIDTH-1):0] data,
	input [(ADDR_WIDTH-1):0] addr,
	input we, clk,
	output [(DATA_WIDTH-1):0] q
);

	// Declare the RAM variable
	reg [DATA_WIDTH-1:0] ram[2**ADDR_WIDTH-1:0];

	// Le os valores iniciais do arquivo "init.txt"
	initial begin
		ram[0] = 16'b0101110000000000;
        ram[1] = 16'b0000000000000000;
        ram[2] = 16'b0101110000000000;
        ram[3] = 16'b0000000000000000;
        ram[4] = 16'b0001000000000000;
        ram[5] = 16'b0000000000000001;
        ram[6] = 16'b0010000000000000;
        ram[7] = 16'b0000000000000011;
        ram[8] = 16'b0101000000000000;
        ram[9] = 16'b0000000000011000;
        ram[10] = 16'b0100100000000000;
        ram[11] = 16'b0000000000010000;
        ram[12] = 16'b0000100000000000;
        ram[13] = 16'b0000000000000001;
        ram[14] = 16'b0100000000000000;
        ram[15] = 16'b0000000000000100;
        ram[16] = 16'b0001000000000000;
        ram[17] = 16'b0000000000000011;
        ram[18] = 16'b0010000000000000;
        ram[19] = 16'b0000000000000001;
        ram[20] = 16'b0000100000000000;
        ram[21] = 16'b0000000000000011;
        ram[22] = 16'b0100000000000000;
        ram[23] = 16'b0000000000000100;
        ram[24] = 16'b0110000000000000;
        ram[25] = 16'b0000000000000001;
        ram[26] = 16'b0111111000000000;
	end 

	always @ (posedge clk)
	begin
		// Write
		if (we) begin
			ram[addr] <= data;
		end
	end

	// Entrada de endereco especifica a saida
	assign q = ram[addr];

endmodule
